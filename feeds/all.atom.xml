<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Other Shore</title><link href="http://blog.atomd.me/" rel="alternate"></link><link href="http://blog.atomd.me/feeds/all.atom.xml" rel="self"></link><id>http://blog.atomd.me/</id><updated>2013-08-25T19:03:00+08:00</updated><entry><title>网络资源的高可用技术使用以及分析</title><link href="http://blog.atomd.me/posts/technology/network-ha/" rel="alternate"></link><updated>2013-08-25T19:03:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2013-08-25:posts/technology/network-ha/</id><summary type="html">&lt;p&gt;因为项目的原因，我决定开始一个专题来分析网络层面的高可用技术(这个划分方式并不准确），主要围绕相关项目使用方式和技术架构。&lt;/p&gt;
&lt;h3&gt;项目&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LVS&lt;/li&gt;
&lt;li&gt;Keepalived&lt;/li&gt;
&lt;li&gt;Heartbeat&lt;/li&gt;
&lt;li&gt;Pacemaker&lt;/li&gt;
&lt;li&gt;Tcpcopy&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CARP&lt;/li&gt;
&lt;li&gt;VRPR&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Keepalived&lt;/h2&gt;
&lt;p&gt;使用Keepalived，其使用VRRP协议来保证高可用或热备，用来防止单点故障的发生。&lt;/p&gt;
&lt;p&gt;&lt;img alt="IP" src="http://www.keepalived.org/images/Software%20Design.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Keepalived也是模块化设计，不同模块复杂不同的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;core：是keepalived的核心，复杂主进程的启动和维护，全局配置文件的加载解析等&lt;/li&gt;
&lt;li&gt;check：负责healthchecker(健康检查)，包括了各种健康检查方式，以及对应的配置的解析包括LVS的配置解析&lt;/li&gt;
&lt;li&gt;vrrp：VRRPD子进程，VRRPD子进程就是来实现VRRP协议的&lt;/li&gt;
&lt;li&gt;libipfwc/libipvs：配置LVS会用到&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Keepalived 安装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget http://www.keepalived.org/software/keepalived-1.2.7.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;tar -zxvf keepalived-1.2.7.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;keepalived-1.2.2
&lt;span class="nv"&gt;$ &lt;/span&gt;./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/keepalived
&lt;span class="nv"&gt;$ &lt;/span&gt;make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;span class="c"&gt;# 文件拷贝&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/keepalived
&lt;span class="nv"&gt;$ &lt;/span&gt;cp /usr/local/keepalived/sbin/keepalived /usr/sbin/
&lt;span class="nv"&gt;$ &lt;/span&gt;cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir -p /etc/keepalived/
&lt;span class="nv"&gt;$ &lt;/span&gt;cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;主要配置&lt;/h3&gt;
&lt;h4&gt;两台机器IP配置&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;10.0.3.2 (Master：eth0)&lt;/li&gt;
&lt;li&gt;10.0.3.3 (Backup：eth0)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Master 配置&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;! Configuration File for keepalived

vrrp_script chk_tcp {
    script &amp;quot;bash -c &amp;#39;&amp;lt;/dev/tcp/0.0.0.0/8889&amp;#39;&amp;quot; # connects and exits
    interval 1 # check every 1 second
    weight -10 # default prio: -2 if connect fails
    fall 2
    rise 2
}

global_defs {
   notification_email {
     dwb319@gmail.com
   }
   notification_email_from mail@lab.org
   ! smtp_server 192.168.200.1
   ! smtp_connect_timeout 30
   router_id LVS_DEVEL
}

vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 101
    advert_int 1

    authentication {
        auth_type PASS
        auth_pass 1111
    }
    track_script {
        chk_tcp
    }
    virtual_ipaddress {
        10.0.3.100
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Backup 配置&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;! Configuration File for keepalived

vrrp_script chk_tcp {
    script &amp;quot;bash -c &amp;#39;&amp;lt;/dev/tcp/10.0.3.3/8889&amp;#39;&amp;quot; # connects and exits
    interval 1 # check every 1 second
    weight -10 # default prio: -2 if connect fails
    fall 1
    rise 2
}

global_defs {
   notification_email {
     dwb319@gmail.com
   }
   notification_email_from mail@lab.com
   ! smtp_server 192.168.200.1
   ! smtp_connect_timeout 30
   router_id LVS_DEVEL
}

vrrp_instance VI_1 {
    state BACKUP
    interface eth0
    virtual_router_id 51
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    track_script {
        chk_tcp
    }
    virtual_ipaddress {
        10.0.3.100
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;使用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;/etc/init.d/keepalived start | restart | stop&lt;/li&gt;
&lt;li&gt;通过 ip a 查看virtual ip&lt;/li&gt;
&lt;li&gt;日志信息在/var/log/message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;未完待续&lt;/em&gt;&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary><category term="ha"></category></entry><entry><title>喜剧演员的忧伤</title><link href="http://blog.atomd.me/posts/essay/the-sadness-of-comedians/" rel="alternate"></link><updated>2013-06-03T01:46:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2013-06-03:posts/essay/the-sadness-of-comedians/</id><summary type="html">&lt;p&gt;看了《中国合伙人》，最初是想去看教主逆袭的，看完后，撒了泪，笑了场，心情激动。dis 同学看我直接给了5星，便问，“这… 你给了社交网络多少分？”，我一查两个我果然都给了5星。&lt;/p&gt;
&lt;p&gt;相比《致青春》莫名的矫情，《中国合伙人》有背景，有情节。更重要的是它真实，前半部分的青春更贴近我的大学生活，后半部分也是我们曾经筹划和幻想过的。&lt;/p&gt;
&lt;p&gt;其实这是部很忧伤的电影。孟晓骏问成东青，“你的梦想是什么？你的梦想是什么？”，成东青不知。这感觉扎克伯格在《社交网络》片尾一遍一遍刷新着前女友的页面一样，和去问一个喜剧演员“你快乐么？你快乐么？”一样，太无力了。&lt;/p&gt;
&lt;p&gt;最后，成东青只能痴痴望着苏梅，王阳和胖妞过起安稳的日子，孟晓骏靠今日之成就才能找回昔日的尊严。“流水它带走光阴的故事，改变了我们”，这是一个尽弃初心的故事，想改变世界，然后妥协，最后被世界改变了的故事。可以理解，却或多或少难以接受。也许这就是成功需要的代价。&lt;/p&gt;
&lt;p&gt;不过反过来想想改变本身不是坏事。对于大多数的我们是在寻求改变的，我们不断和过去告别，从新的起点开始，都是为了更好。但是这一路还是需要坚持些什么。&lt;/p&gt;
&lt;p&gt;念念不忘，必有回响。&lt;/p&gt;</summary><category term="movie"></category></entry><entry><title>在Linode上部署python web项目</title><link href="http://blog.atomd.me/posts/technology/a-milestone/" rel="alternate"></link><updated>2013-05-02T20:23:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2013-05-02:posts/technology/a-milestone/</id><summary type="html">&lt;h2&gt;Linode Statistics&lt;/h2&gt;
&lt;p&gt;&lt;img alt="figure-1" src="http://blog.atomd.me/images/a-milestone/linode2.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Google Realtime Analysis&lt;/h2&gt;
&lt;p&gt;&lt;img alt="figure-2" src="http://blog.atomd.me/images/a-milestone/top_realtime.png" /&gt;&lt;/p&gt;
&lt;h2&gt;服务器上的配置&lt;/h2&gt;
&lt;p&gt;服务采用 Flask (gevent patching) + gunicorn + MySQL.&lt;/p&gt;
&lt;p&gt;服务器按照 Linode 的文档进行配置，尤其是这两篇：
- &lt;a href="https://library.linode.com/security/basics"&gt;Linux Security Basics&lt;/a&gt;
- &lt;a href="https://library.linode.com/hosting-website"&gt;Hosting a Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linode文档真心很全面，虽然都很基础，但目睹了郝哥轻松拖了某小公司的数据库，发现小处着眼，方能解决大问题。怎么被脱库的呢，那个公司是数据库可公网访问，Root 登录，密码123456，看了我都直呼，Oh，My God!&lt;/p&gt;
&lt;p&gt;最后附上 @hellosa 给我发的优化配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# /etc/sysctl.conf :&lt;/span&gt;
&lt;span class="cp"&gt;# =================================================&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_forward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="cp"&gt;######## important #####################&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netfilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nf_conntrack_tcp_timeout_established&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_timestamps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="cp"&gt;########################################&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_redirects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_redirects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_redirects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rp_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept_source_route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sysrq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core_uses_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;panic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msgmnb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt;
&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msgmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt;
&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shmmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;68719476736&lt;/span&gt;
&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shmall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4294967296&lt;/span&gt;


&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_fin_timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_tw_recycle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_tw_reuse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmem_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16777216&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmem_default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8388608&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_rmem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="mi"&gt;65535&lt;/span&gt; &lt;span class="mi"&gt;16777216&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wmem_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;33554432&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wmem_default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8388608&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_wmem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="mi"&gt;65535&lt;/span&gt; &lt;span class="mi"&gt;33554432&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_mem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;786432&lt;/span&gt; &lt;span class="mi"&gt;2097152&lt;/span&gt; &lt;span class="mi"&gt;3145728&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optmem_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40960&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netdev_max_backlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;262144&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;somaxconn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;262144&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_syncookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_max_orphans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3276800&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_max_syn_backlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;262144&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_synack_retries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_syn_retries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_orphan_retries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_local_port_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;  &lt;span class="mi"&gt;65535&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_window_scaling&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcp_keepalive_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1800&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rp_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rp_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rp_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rp_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eth1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rp_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;em1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rp_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;em2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rp_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_default_ttl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;

&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;655350&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们之前开玩笑说，不会连本科娱乐的作品也超越不了吧。这周归档文件时，我就把相关记录翻出来了。虽然东西API都很简单，但是从流量和并发来看，我在单实例的Linode512上完成的还是不错的。&lt;/p&gt;</summary><category term="linode"></category><category term="deployment"></category></entry><entry><title>python在douban的使用</title><link href="http://blog.atomd.me/posts/technology/the-usage-of-python-in-douban/" rel="alternate"></link><updated>2013-04-20T21:03:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2013-04-20:posts/technology/the-usage-of-python-in-douban/</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;内容源于洪强宁的一次分享, 以下是其演讲的一些笔记。&lt;/p&gt;
&lt;h3&gt;协同开发环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;协同开发环境 mercurial(hg)&lt;/li&gt;
&lt;li&gt;知识和项目管理 trac&lt;/li&gt;
&lt;li&gt;交流沟通 IRC &lt;strong&gt;开源协议（如上线通知机器人）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;前端&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;模板 Mako&lt;/li&gt;
&lt;li&gt;静态文件处理. 如自动处理静态文件URL和自动js内联&lt;/li&gt;
&lt;li&gt;预编译系统. @import&lt;/li&gt;
&lt;li&gt;引入pyScss.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;移动端&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;APNS Agent.  &lt;strong&gt;gevent+bottle+APNSWrapper&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;产品开发&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;web框架 Quixote v1.2 只使用了url dispatch部分，&lt;strong&gt;Traversal based，非正则匹配，类似目录层级的线性查找，比route based性能好，易于控制，如在某个层级统一对请求拦截、查找&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大量使用语言特性. 如decorator，generator（&lt;strong&gt;这里举了个feed合并的例子，见&lt;a href="http://slidesha.re/tVis"&gt;Python于Web 2.0网站的应用&lt;/a&gt; page102&lt;/strong&gt;), meta(黑魔法)&lt;/li&gt;
&lt;li&gt;OneRing 开源，web技术做桌面应用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;技术支持&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Restful MongoDB Service.   django-piston+sleepy&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;QA&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pylint 在代码提交后做静态检查，自制插件SQL inject漏洞检查，XSS漏洞检查等&lt;/li&gt;
&lt;li&gt;onimaru 错误收集系统，统计及展示，基于 django-sentry实现&lt;/li&gt;
&lt;li&gt;release manager 自动打tag，确认测试结果，发送email及irc－bot通知，django实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;算法&lt;/h3&gt;
&lt;p&gt;关注性能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cmy Mysql Client, C API＋python wrapper,只支持select,返回iterator,比MySQLdb在大数据量时性能高一个数量级&lt;/li&gt;
&lt;li&gt;C++ Intergration，C++实现算法（boost python）,python加载和初始化数据来保证灵活&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;平台&lt;/h3&gt;
&lt;p&gt;关注性能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Online Profiler 性能分析工具，举例提到的是页面渲染的分析工具，包括函数执行时间，SQL数量及时间，memcached访问和时间等，利用了python hotshot模块&lt;/li&gt;
&lt;li&gt;DoubanService thrift RPC, PasteScript实现代码生成和提供服务，客户端负责负责均衡和failover（将&lt;a href="https://github.com/twitter/thrift_client"&gt;thrift_client&lt;/a&gt;移植到python）,nagios和munin集成监控&lt;/li&gt;
&lt;li&gt;Dpark 分布式计算框架，将Spark移植到python，基于mesos实现资源调度&lt;/li&gt;
&lt;li&gt;pypcap + dpkt 对mysql抓包，进行分析检查，对slave热备（&lt;strong&gt;这里提到了在他们是一主加一个热备，在现在的数据规模下，slave需要几十分钟才能达到正常水平，这是不是说明虽然不依赖mysql的缓存，但这个缓存也有些作用&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;DAE Google AppEngine, 内部使用. 提到的技术有virtualenv、gunicorn、gevent。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了python，还使用C\C++, &lt;strong&gt;go&lt;/strong&gt;, &lt;strong&gt;R&lt;/strong&gt;, obj-c, java, c#&lt;/p&gt;
&lt;p&gt;PS：这次pyCon的多个议题都提到了coroutine, 或许引入协程会是python web开发的未来。&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>MHA 的使用方式</title><link href="http://blog.atomd.me/posts/technology/the-usage-of-mha/" rel="alternate"></link><updated>2013-04-11T20:03:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2013-04-11:posts/technology/the-usage-of-mha/</id><summary type="html">&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;MHA由Node和Manager模块组成，Node运行在每一台MySQL服务器上。&lt;/p&gt;
&lt;h3&gt;安装 MHA Node&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/yoshinorim/mha4mysql-node"&gt;https://github.com/yoshinorim/mha4mysql-node&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以相关服务器都需要部署Node模块&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;依赖&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DBD::mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ubuntu/Debian&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## If you have not installed DBD::mysql, install it like below, or install from source.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install libdbd-mysql-perl

&lt;span class="c"&gt;## Get MHA Node deb package from &amp;quot;Downloads&amp;quot; section.&lt;/span&gt;
&lt;span class="c"&gt;## http://code.google.com/p/mysql-master-ha/downloads/list&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dpkg -i mha4mysql-node_X.Y_all.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;source.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## Install DBD::mysql if not installed&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;tar -zxf mha4mysql-node-X.Y.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;perl Makefile.PL
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装 MHA Manage&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;监控管理模块&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;依赖&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MHA Node package&lt;/li&gt;
&lt;li&gt;DBD::mysql&lt;/li&gt;
&lt;li&gt;Config::Tiny&lt;/li&gt;
&lt;li&gt;Log::Dispatch&lt;/li&gt;
&lt;li&gt;Parallel::ForkManager&lt;/li&gt;
&lt;li&gt;Time::HiRes (included from Perl v5.7.3)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ubuntu/Debian&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## Install dependent Perl modules&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install libdbd-mysql-perl
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install libconfig-tiny-perl
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install liblog-dispatch-perl
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install libparallel-forkmanager-perl

&lt;span class="c"&gt;## Install MHA Node, since MHA Manager uses some modules provided by MHA Node.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dpkg -i mha4mysql-node_X.Y_all.deb

&lt;span class="c"&gt;## Finally you can install MHA Manager&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;http://code.google.com/p/mysql-master-ha/downloads/list
&lt;span class="nv"&gt;$ &lt;/span&gt;dpkg -i mha4mysql-manager_X.Y_all.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;source.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## Install dependent Perl modules&lt;/span&gt;
&lt;span class="c"&gt;# MHA Node (See above)&lt;/span&gt;
&lt;span class="c"&gt;# Config::Tiny&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;perl -MCPAN -e &lt;span class="s2"&gt;&amp;quot;install Config::Tiny&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# Log::Dispatch&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;perl -MCPAN -e &lt;span class="s2"&gt;&amp;quot;install Log::Dispatch&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# Parallel::ForkManager&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;perl -MCPAN -e &lt;span class="s2"&gt;&amp;quot;install Parallel::ForkManager&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;## Installing MHA Manager&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;tar -zxf mha4mysql-manager-X.Y.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;perl Makefile.PL
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;需要和限制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SSH public key authentication&lt;/li&gt;
&lt;li&gt;Linux only&lt;/li&gt;
&lt;li&gt;Single writable master and multiple slaves or read-only masters&lt;/li&gt;
&lt;li&gt;MySQL version 5.0 or later, Use mysqlbinlog 5.1+ for MySQL 5.1+&lt;/li&gt;
&lt;li&gt;log-bin must be enabled on candidate masters&lt;/li&gt;
&lt;li&gt;Binary log and relay log filtering rules must be same on all servers(binlog-do-db, replicate-ignore-db, etc)&lt;/li&gt;
&lt;li&gt;Replication user must exist on candidate masters&lt;/li&gt;
&lt;li&gt;Preserve relay logs and purge regularly&lt;/li&gt;
&lt;li&gt;Do not use LOAD DATA INFILE with Statement Based Binary Logging（SET sql_log_bin=0; LOAD DATA … ; SET sql_log_bin=1; is more recommended approach）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Note：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;因为MySQL集群中需要做到ssh无验证互访，所以对账户权限做到最小配置，包括访问MySQL目录下的相关文件，以及MHA中脚本上的命令执行权限。&lt;/li&gt;
&lt;li&gt;需要禁用自动清除relog log，改为手动定期，MHA提供了purge_relay_logs脚本并配合crontab使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;h3&gt;复制环境&lt;/h3&gt;
&lt;p&gt;MHA自己不建立MySQL集群的复制环境，而是自己直接运行在已经存在的复制环境之中&lt;/p&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;p&gt;配置分为全局配置和程序配置，它们之间是继承的关系，通常我们只需要程序配置，比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[server default]&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pwd&lt;/span&gt;

&lt;span class="na"&gt;repl_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;replication&lt;/span&gt;
&lt;span class="na"&gt;repl_password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slave&lt;/span&gt;

&lt;span class="na"&gt;ping_interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;latest_priority&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;ignore_fail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;ssh_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;duanwenbo&lt;/span&gt;

&lt;span class="na"&gt;master_pid_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/duanwenbo/master_pid.pid&lt;/span&gt;
&lt;span class="na"&gt;remote_workdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/duanwenbo/m&lt;/span&gt;
&lt;span class="na"&gt;manager_workdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/duanwenbo/m&lt;/span&gt;

&lt;span class="na"&gt;init_conf_load_script&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;shutdown_script&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;master_ip_failover_script&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/home/duanwenbo/mha4mysql-manager/samples/scripts/master_ip_failover&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;master_ip_online_change_script&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;report_script&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;log_level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;debug&lt;/span&gt;

&lt;span class="k"&gt;[server1]&lt;/span&gt;
&lt;span class="na"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gentoo2&lt;/span&gt;


&lt;span class="k"&gt;[server2]&lt;/span&gt;
&lt;span class="na"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gentoo3&lt;/span&gt;
&lt;span class="na"&gt;candidate_master&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;[server3]&lt;/span&gt;
&lt;span class="na"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gentoo8&lt;/span&gt;
&lt;span class="na"&gt;no_master&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;[server4]&lt;/span&gt;
&lt;span class="na"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gentoo7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;比较容易忽略的参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;candidate_master，由更高的优先级成为master&lt;/li&gt;
&lt;li&gt;no_master,  永远不会成为master&lt;/li&gt;
&lt;li&gt;ignore_fail, MHA Manager不会启动如果有任意一台机子出现，这个参数可以指定忽略一台机子的错误&lt;/li&gt;
&lt;li&gt;latest_priority，用于完全控制服务器的优先级顺序&lt;/li&gt;
&lt;li&gt;ping_interval，如果连续丢失3个ping_interval，则认为master宕机了&lt;/li&gt;
&lt;li&gt;ping_type，ping_type=SELECT(default, "SELECT 1") or ping_type=CONNECT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多的参数见&lt;a href="http://code.google.com/p/mysql-master-ha/wiki/Parameters#Parameters"&gt;http://code.google.com/p/mysql-master-ha/wiki/Parameters#Parameters&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;检查SSH连接&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# masterha_check_ssh --conf=/etc/app1.cnf&lt;/span&gt;

Sat May 14 14:42:19 2011 - &lt;span class="o"&gt;[&lt;/span&gt;warn&lt;span class="o"&gt;]&lt;/span&gt; Global configuration file /etc/masterha_default.cnf not found. Skipping.
Sat May 14 14:42:19 2011 - &lt;span class="o"&gt;[&lt;/span&gt;info&lt;span class="o"&gt;]&lt;/span&gt; Reading application default configurations from /etc/app1.cnf..
Sat May 14 14:42:19 2011 - &lt;span class="o"&gt;[&lt;/span&gt;info&lt;span class="o"&gt;]&lt;/span&gt; Reading server configurations from /etc/app1.cnf..
Sat May 14 14:42:19 2011 - &lt;span class="o"&gt;[&lt;/span&gt;info&lt;span class="o"&gt;]&lt;/span&gt; Starting SSH connection tests..
Sat May 14 14:42:19 2011 - &lt;span class="o"&gt;[&lt;/span&gt;debug&lt;span class="o"&gt;]&lt;/span&gt;  Connecting via SSH from root@host1&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.1&lt;span class="o"&gt;)&lt;/span&gt; to root@host2&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.2&lt;span class="o"&gt;)&lt;/span&gt;..
Sat May 14 14:42:20 2011 - &lt;span class="o"&gt;[&lt;/span&gt;debug&lt;span class="o"&gt;]&lt;/span&gt;   ok.
Sat May 14 14:42:20 2011 - &lt;span class="o"&gt;[&lt;/span&gt;debug&lt;span class="o"&gt;]&lt;/span&gt;  Connecting via SSH from root@host1&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.1&lt;span class="o"&gt;)&lt;/span&gt; to root@host3&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.3&lt;span class="o"&gt;)&lt;/span&gt;..
Sat May 14 14:42:20 2011 - &lt;span class="o"&gt;[&lt;/span&gt;debug&lt;span class="o"&gt;]&lt;/span&gt;   ok.
Sat May 14 14:42:21 2011 - &lt;span class="o"&gt;[&lt;/span&gt;debug&lt;span class="o"&gt;]&lt;/span&gt;  Connecting via SSH from root@host2&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.2&lt;span class="o"&gt;)&lt;/span&gt; to root@host1&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.1&lt;span class="o"&gt;)&lt;/span&gt;..
Sat May 14 14:42:21 2011 - &lt;span class="o"&gt;[&lt;/span&gt;debug&lt;span class="o"&gt;]&lt;/span&gt;   ok.
Sat May 14 14:42:21 2011 - &lt;span class="o"&gt;[&lt;/span&gt;debug&lt;span class="o"&gt;]&lt;/span&gt;  Connecting via SSH from root@host2&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.2&lt;span class="o"&gt;)&lt;/span&gt; to root@host3&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.3&lt;span class="o"&gt;)&lt;/span&gt;..
Sat May 14 14:42:21 2011 - &lt;span class="o"&gt;[&lt;/span&gt;debug&lt;span class="o"&gt;]&lt;/span&gt;   ok.
Sat May 14 14:42:22 2011 - &lt;span class="o"&gt;[&lt;/span&gt;debug&lt;span class="o"&gt;]&lt;/span&gt;  Connecting via SSH from root@host3&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.3&lt;span class="o"&gt;)&lt;/span&gt; to root@host1&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.1&lt;span class="o"&gt;)&lt;/span&gt;..
Sat May 14 14:42:22 2011 - &lt;span class="o"&gt;[&lt;/span&gt;debug&lt;span class="o"&gt;]&lt;/span&gt;   ok.
Sat May 14 14:42:22 2011 - &lt;span class="o"&gt;[&lt;/span&gt;debug&lt;span class="o"&gt;]&lt;/span&gt;  Connecting via SSH from root@host3&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.3&lt;span class="o"&gt;)&lt;/span&gt; to root@host2&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.2&lt;span class="o"&gt;)&lt;/span&gt;..
Sat May 14 14:42:22 2011 - &lt;span class="o"&gt;[&lt;/span&gt;debug&lt;span class="o"&gt;]&lt;/span&gt;   ok.
Sat May 14 14:42:22 2011 - &lt;span class="o"&gt;[&lt;/span&gt;info&lt;span class="o"&gt;]&lt;/span&gt; All SSH connection tests passed successfully.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;检查复制配置&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;manager_host&lt;span class="nv"&gt;$ &lt;/span&gt;masterha_check_repl --conf&lt;span class="o"&gt;=&lt;/span&gt;/etc/app1.cnf
...
MySQL Replication Health is OK.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;启动Manager&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;manager_host&lt;span class="nv"&gt;$ &lt;/span&gt;masterha_manager --conf&lt;span class="o"&gt;=&lt;/span&gt;/etc/app1.cnf
....
Sat May 14 15:58:29 2011 - &lt;span class="o"&gt;[&lt;/span&gt;info&lt;span class="o"&gt;]&lt;/span&gt; Connecting to the master host1&lt;span class="o"&gt;(&lt;/span&gt;192.168.0.1:3306&lt;span class="o"&gt;)&lt;/span&gt; and sleeping &lt;span class="k"&gt;until &lt;/span&gt;it doesn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t respond..
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;后台执行, Set nohup, and make sure that masterha_manager does not read/write from/to STDIN, STDOUT and STDERR.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;manager_host&lt;span class="nv"&gt;$ &lt;/span&gt;nohup masterha_manager --conf&lt;span class="o"&gt;=&lt;/span&gt;/etc/app1.cnf &amp;lt; /dev/null &amp;gt; /var/log/masterha/app1/app1.log 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Running MHA Manager from daemontools&lt;/h4&gt;
&lt;p&gt;see &lt;a href="http://code.google.com/p/mysql-master-ha/wiki/Runnning_Background#Running_MHA_Manager_from_daemontools"&gt;http://code.google.com/p/mysql-master-ha/wiki/Runnning_Background#Running_MHA_Manager_from_daemontools&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;特定参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;last_failover_minute=(minutes)&lt;/strong&gt;
If the previous failover was done too recently (8 hours by default), MHA Manager does not do failover because it is highly likely that problems can not be solved by just doing failover.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ignore_last_failover&lt;/strong&gt;, MHA continues failover regardless of the last failover status.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wait_on_failover_error=(seconds)&lt;/strong&gt;, it is pretty reasonable for waiting for some time on errors before restarting monitoring again.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;remove_dead_master_conf&lt;/strong&gt;, when this option is set, if failover finishes successfully, MHA Manager automatically removes the section of the dead master from the configuration file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;检查运行状态&lt;/h3&gt;
&lt;h4&gt;masterha_check_status command is useful to check current MHA Manager status.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;manager_host&lt;span class="nv"&gt;$ &lt;/span&gt;masterha_check_status --conf&lt;span class="o"&gt;=&lt;/span&gt;/etc/app1.cnf
app1 &lt;span class="o"&gt;(&lt;/span&gt;pid:5057&lt;span class="o"&gt;)&lt;/span&gt; is running&lt;span class="o"&gt;(&lt;/span&gt;0:PING_OK&lt;span class="o"&gt;)&lt;/span&gt;, master:host1
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;If manager stops or configuration file is invalid, the following error will be returned.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;manager_host&lt;span class="nv"&gt;$ &lt;/span&gt;masterha_check_status --conf&lt;span class="o"&gt;=&lt;/span&gt;/etc/app1.cnf
app1 is stopped&lt;span class="o"&gt;(&lt;/span&gt;1:NOT_RUNNING&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;停止&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;manager_host&lt;span class="nv"&gt;$ &lt;/span&gt;masterha_stop --conf&lt;span class="o"&gt;=&lt;/span&gt;/etc/app1.cnf
Stopped app1 successfully.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;脚本&lt;/h2&gt;
&lt;h3&gt;&lt;a href="http://code.google.com/p/mysql-master-ha/wiki/Requirements#purge_relay_logs_script"&gt;purge_relay_logs script&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;--user&lt;/li&gt;
&lt;li&gt;--password&lt;/li&gt;
&lt;li&gt;--host&lt;/li&gt;
&lt;li&gt;--port&lt;/li&gt;
&lt;li&gt;--workdir(Tentative directory where hard linked relay logs are created and removed)&lt;/li&gt;
&lt;li&gt;--disable_relay_log_purge&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Schedule to run purge_relay_logs script&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;app@slave_host1&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /etc/cron.d/purge_relay_logs
&lt;span class="c"&gt;# purge relay logs at 5am&lt;/span&gt;
0 5 * * * app /usr/bin/purge_relay_logs --user&lt;span class="o"&gt;=&lt;/span&gt;root --password&lt;span class="o"&gt;=&lt;/span&gt;PASSWORD --disable_relay_log_purge &amp;gt;&amp;gt; /var/log/masterha/purge_relay_logs.log 2&amp;gt;&amp;amp;1
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://code.google.com/p/mysql-master-ha/wiki/Parameters#master_ip_failover_script"&gt;master_ip_failover_script&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在Master宕机了后，failover调用的脚本。&lt;/p&gt;
&lt;h4&gt;Checking phase 相关参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;--command=status&lt;/li&gt;
&lt;li&gt;--ssh_user=(current master's ssh username)&lt;/li&gt;
&lt;li&gt;--orig_master_host=(current master's hostname)&lt;/li&gt;
&lt;li&gt;--orig_master_ip=(current master's ip address)&lt;/li&gt;
&lt;li&gt;--orig_master_port=(current master's port number)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Current master shutdown phase 相关参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;--command=stop or stopssh&lt;/li&gt;
&lt;li&gt;--ssh_user=(dead master's ssh username, if reachable via ssh)&lt;/li&gt;
&lt;li&gt;--orig_master_host=(current(dead) master's hostname)&lt;/li&gt;
&lt;li&gt;--orig_master_ip=(current(dead) master's ip address)&lt;/li&gt;
&lt;li&gt;--orig_master_port=(current(dead) master's port number)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;New master activation phase 相关参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;--command=start&lt;/li&gt;
&lt;li&gt;--ssh_user=(new master's ssh username)&lt;/li&gt;
&lt;li&gt;--orig_master_host=(dead master's hostname)&lt;/li&gt;
&lt;li&gt;--orig_master_ip=(dead master's ip address)&lt;/li&gt;
&lt;li&gt;--orig_master_port=(dead master's port number)&lt;/li&gt;
&lt;li&gt;--new_master_host=(new master's hostname)&lt;/li&gt;
&lt;li&gt;--new_master_ip=(new master's ip address)&lt;/li&gt;
&lt;li&gt;--new_master_port(new master's port number)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;return&lt;/h4&gt;
&lt;p&gt;If the script exits with return code 0 or 10, MHA Manager continues operations. If the script exits with return code other than 0 or 10, MHA Manager aborts and it won't continue failover.&lt;/p&gt;
&lt;h4&gt;example&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/yoshinorim/mha4mysql-manager/blob/master/samples/scripts/master_ip_failover"&gt;https://github.com/yoshinorim/mha4mysql-manager/blob/master/samples/scripts/master_ip_failover&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://code.google.com/p/mysql-master-ha/wiki/Parameters#shutdown_script"&gt;shutdown_script&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Master不可用后，用于关闭服务的脚本。&lt;/p&gt;
&lt;h4&gt;SSH is reachable  相关参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;--command=stopssh&lt;/li&gt;
&lt;li&gt;--ssh_user=(ssh username so that you can connect to the master)&lt;/li&gt;
&lt;li&gt;--host=(master's hostname)&lt;/li&gt;
&lt;li&gt;--ip=(master's ip address)&lt;/li&gt;
&lt;li&gt;--port=(master's port number)&lt;/li&gt;
&lt;li&gt;--pid_file=(master's pid file)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;the master is not reachable via SSH  相关参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;--command=stop&lt;/li&gt;
&lt;li&gt;--host=(master's hostname)&lt;/li&gt;
&lt;li&gt;--ip=(master's ip address)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;example&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/yoshinorim/mha4mysql-manager/blob/master/samples/scripts/power_manager"&gt;https://github.com/yoshinorim/mha4mysql-manager/blob/master/samples/scripts/power_manager&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://code.google.com/p/mysql-master-ha/wiki/Parameters#report_script"&gt;report_script&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;用于告警的script&lt;/h3&gt;
&lt;h4&gt;相关参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;--orig_master_host=(dead master's hostname)&lt;/li&gt;
&lt;li&gt;--new_master_host=(new master's hostname)&lt;/li&gt;
&lt;li&gt;--new_slave_hosts=(new slaves' hostnames, delimited by commas)&lt;/li&gt;
&lt;li&gt;--subject=(mail subject)&lt;/li&gt;
&lt;li&gt;--body=(body)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;example&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/yoshinorim/mha4mysql-manager/blob/master/samples/scripts/send_report"&gt;https://github.com/yoshinorim/mha4mysql-manager/blob/master/samples/scripts/send_report&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://code.google.com/p/mysql-master-ha/wiki/Parameters#master_ip_online_change_script"&gt;master_ip_online_change_script&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;用于master的动态更换&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://code.google.com/p/mysql-master-ha/wiki/Parameters#secondary_check_script"&gt;secondary_check_script&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;使用两个或两个以上的网络路由来检查网络的可用性&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;secondary_check_script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;masterha_secondary_check -s remote_host1 -s remote_host2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PS:已经包括了内置脚本，也可根据自己的需求来扩展&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://code.google.com/p/mysql-master-ha/wiki/Parameters#init_conf_load_script"&gt;init_conf_load_script&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当不想配置文件出现一些纯文本，比如密码。这个脚本可以用于覆盖全局配置文件。&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary><category term="mysql"></category><category term="mha"></category><category term="ha"></category></entry><entry><title>MySQL的复制与高可用性</title><link href="http://blog.atomd.me/posts/technology/ha-of-mysql/" rel="alternate"></link><updated>2013-04-08T19:03:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2013-04-08:posts/technology/ha-of-mysql/</id><summary type="html">&lt;p&gt;&lt;strong&gt;MySQL Replication and high Availability&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Replicaiton Implementation&lt;/h1&gt;
&lt;h2&gt;Three thread&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Binlog dump thread&lt;/li&gt;
&lt;li&gt;Slave I/O thread&lt;/li&gt;
&lt;li&gt;Slave SQL thread&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How MySQL replicaiton works&lt;/h3&gt;
&lt;p&gt;&lt;img alt="p-1" src="http://blog.atomd.me/images/ha-of-mysql/Replicaiton.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Two ways&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;asynchronous&lt;/li&gt;
&lt;li&gt;semi-synchronous(5.5+)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Maatkit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mk-table-checksum : Perform an online replication consistency check, or checksum MySQL tables efficiently on one or many servers&lt;/li&gt;
&lt;li&gt;mk-archiver : Archive rows from a MySQL table into another table or a file&lt;/li&gt;
&lt;li&gt;mk-audit : Analyze, summarize and report on MySQL config, schema and operation&lt;/li&gt;
&lt;li&gt;mk-duplicate-key-checker : Find duplicate keys and foreign keys on MySQL tables&lt;/li&gt;
&lt;li&gt;mk-deadlock-logger : Extract and log MySQL deadlock information&lt;/li&gt;
&lt;li&gt;mk-visual-explain : Format EXPLAIN output as a tree&lt;/li&gt;
&lt;li&gt;mk-parallel-dump : Dump sets of MySQL tables in parallel&lt;/li&gt;
&lt;li&gt;mk-parallel-restore : Load files into MySQL in parallel&lt;/li&gt;
&lt;li&gt;mk-query-digest Parses logs and more. Analyze, transform, filter, review and report on queries&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Replication Configuration&lt;/h1&gt;
&lt;h2&gt;Step 1 Preparation work&lt;/h2&gt;
&lt;h3&gt;Setting the Configuration&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[mysqld]&lt;/span&gt;
&lt;span class="na"&gt;log-bin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;path for binary log&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;server-id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;different id&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;binlog-do-db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;database name&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;binlog-ignore-db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;database name&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Creating a User for Replication&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;USER&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;repl&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%.mydomain.com&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;IDENTIFIED&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;slavepass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="n"&gt;REPLICATION&lt;/span&gt; &lt;span class="n"&gt;SLAVE&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;repl&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%.mydomain.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step 2 Get a snapshot of the master&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Database cold backup&lt;/li&gt;
&lt;li&gt;Software with Snapshot feature(ZFS, LVM ...)&lt;/li&gt;
&lt;li&gt;mysqldump/XtraBackup&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Replication Configuration&lt;/h1&gt;
&lt;h3&gt;mysqldump&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FLUSH&lt;/span&gt; &lt;span class="kp"&gt;TABLES&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="k"&gt;READ&lt;/span&gt; &lt;span class="k"&gt;LOCK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;MASTER&lt;/span&gt; &lt;span class="n"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;+------------------+----------+--------------+------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Binlog_Do_DB&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Binlog_Ignore_DB&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+------------------+----------+--------------+------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;000008&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;manual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+------------------+----------+--------------+------------------+&lt;/span&gt;
&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mysqldump&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;uatomd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;UNLOCK&lt;/span&gt; &lt;span class="kp"&gt;TABLES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step 3 Restore the snapshot to slave&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;shell&amp;gt; mysql -uatomd -p -Dtest &amp;lt; db.dump
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step 4 Configure and start the slave&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;change&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;master_host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;masterhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;master_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;repl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;master_password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slavepass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;master_log_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql-bin.000008&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;master_log_pos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;slave&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1&gt;Replication Solutions&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;Master-Slaves&lt;/h2&gt;
&lt;p&gt;&lt;img alt="p-2" src="http://blog.atomd.me/images/ha-of-mysql/Master-Slaves.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Replication Solutions&lt;/h1&gt;
&lt;h2&gt;Dual-Master&lt;/h2&gt;
&lt;p&gt;&lt;img alt="p-3" src="http://blog.atomd.me/images/ha-of-mysql/Dual-Master.png" /&gt;&lt;/p&gt;
&lt;h2&gt;configuration for preventing key collisions&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;auto-increment-increment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;number&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;auto-increment-offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;number&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1&gt;Replication Solutions&lt;/h1&gt;
&lt;h2&gt;Master-Slaves-Slaves&lt;/h2&gt;
&lt;p&gt;&lt;img alt="p-4" src="http://blog.atomd.me/images/ha-of-mysql/Master-Slaves-Slaves.png" /&gt;&lt;/p&gt;
&lt;h2&gt;configuration for chaining replication servers&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;slave&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1&gt;Replication Solutions&lt;/h1&gt;
&lt;h2&gt;Master-Slaves-Slaves &amp;amp;&amp;amp; Dual-Master&lt;/h2&gt;
&lt;p&gt;&lt;img alt="p-5" src="http://blog.atomd.me/images/ha-of-mysql/Master-Slaves-Slaves-and-Dual-Master.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;High Availability Definition&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Recovery time (a minimum of down-time)&lt;/li&gt;
&lt;li&gt;Data availability (tolerate data loss or not)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;what heartbeat does&lt;/h2&gt;
&lt;p&gt;&lt;img alt="p-6" src="http://blog.atomd.me/images/ha-of-mysql/ha_pic.gif" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;HA Solutions&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;MySQL with DRBD&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Network RAID 1&lt;/li&gt;
&lt;li&gt;Active / Passive (hot vs cold)&lt;/li&gt;
&lt;li&gt;complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;consistency!&lt;/h2&gt;
&lt;p&gt;![&lt;a href="http://blog.atomd.me/images/ha-of-mysql/drdb.gif"&gt;p-7&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;MySQL Cluster NDB&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;MySQL Cluster&lt;/strong&gt; is a technology that enables clustering of in-memory databases in a shared-nothing system.&lt;/p&gt;
&lt;h2&gt;components&lt;/h2&gt;
&lt;p&gt;&lt;img alt="p-8" src="http://blog.atomd.me/images/ha-of-mysql/cluster-components.png" /&gt;&lt;/p&gt;
&lt;h2&gt;In MySQL Cluster 7.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;4 Node Cluster, 251,000 Transactions/min. 2 Node Cluster, 143,000 Transactions/min&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Galera Cluster&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;MySQL/Galera&lt;/strong&gt; is synchronous multi-master cluster for MySQL/InnoDB database.&lt;/p&gt;
&lt;h2&gt;features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Synchronous replication&lt;/li&gt;
&lt;li&gt;Active-active multi-master topology&lt;/li&gt;
&lt;li&gt;Read and write to any cluster node&lt;/li&gt;
&lt;li&gt;Automatic membership control, failed nodes drop from the cluster&lt;/li&gt;
&lt;li&gt;Automatic node joining&lt;/li&gt;
&lt;li&gt;True parallel replication, on row level&lt;/li&gt;
&lt;li&gt;Direct client connections, native MySQL look &amp;amp; feel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p-9" src="http://blog.atomd.me/images/ha-of-mysql/galera.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;MySQL Replication&lt;/h1&gt;
&lt;h2&gt;Difficulties&lt;/h2&gt;
&lt;p&gt;Asynchronous or Semisynchronous - Consistency!&lt;/p&gt;
&lt;h2&gt;For example, Master-Slaves-Slaves&lt;/h2&gt;
&lt;p&gt;&lt;img alt="p-10" src="http://blog.atomd.me/images/ha-of-mysql/mha-problem.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;MySQL Replication&lt;/h1&gt;
&lt;h2&gt;MHA(MySQL Master HA)&lt;/h2&gt;
&lt;p&gt;&lt;img alt="p-11" src="http://blog.atomd.me/images/ha-of-mysql/mha_recovery_procedure.png" /&gt;&lt;/p&gt;
&lt;h2&gt;others&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MMM(Multi-Master Replication Manager)&lt;/li&gt;
&lt;li&gt;PRM(Percona Replication Manager)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;MHA(MySQL Master HA)&lt;/h1&gt;
&lt;p&gt;&lt;img alt="p-12" src="http://blog.atomd.me/images/ha-of-mysql/components_of_mha.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSH public key authentication&lt;/li&gt;
&lt;li&gt;Preserve relay logs and purge regularly&lt;/li&gt;
&lt;li&gt;master_ip_failover_script, shutdown_script, report_script, secondary_check_script&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;MySQL Proxy&lt;/h1&gt;
&lt;p&gt;MySQL Proxy is a simple program that sits between your client and MySQL server(s) that can monitor, analyze or transform their communication.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;load balancing&lt;/li&gt;
&lt;li&gt;failover&lt;/li&gt;
&lt;li&gt;query analysis&lt;/li&gt;
&lt;li&gt;query filtering and modification&lt;/li&gt;
&lt;li&gt;R/W Splitting&lt;/li&gt;
&lt;li&gt;Connection Pool&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Using Lua Script&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;connect_server, read_handshake&lt;/li&gt;
&lt;li&gt;read_auth, read_auth_result&lt;/li&gt;
&lt;li&gt;read_query, read_query_result&lt;/li&gt;
&lt;li&gt;disconnect_client&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;MySQL Proxy&lt;/h1&gt;
&lt;p&gt;&lt;img alt="p-13" src="http://blog.atomd.me/images/ha-of-mysql/proxy.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;FAQ:How much latency does a proxy add to a connection?&lt;/h2&gt;
&lt;p&gt;In the range of 400 microseconds per request.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mysqlslap&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c50&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;einnodb&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;queries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;proxy -&amp;gt; mysql&lt;/h3&gt;
&lt;p&gt;number of seconds to run all queries: 37 seconds
4 cores, 4 event-threads, 170%CPU, 0.7%MEM, 175.7 M&lt;/p&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;p&gt;number of seconds to run all queries: 30 seconds&lt;/p&gt;
&lt;h2&gt;problems&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;lua scripts are difficult to write and debug&lt;/li&gt;
&lt;li&gt;the interface is not so flexible&lt;/li&gt;
&lt;li&gt;performance&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Vitess&lt;/h1&gt;
&lt;p&gt;It does a lot of optimization on the fly, it rewrites queries and acts as a proxy. Currently it serves every YouTube database request. It's RPC based.&lt;/p&gt;
&lt;h2&gt;Motivation and vision&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sessionless connections&lt;/li&gt;
&lt;li&gt;ACID (Atomicity)&lt;/li&gt;
&lt;li&gt;ACID (Consistency)&lt;/li&gt;
&lt;li&gt;Buffer cache vs. row cache&lt;/li&gt;
&lt;/ul&gt;</summary><category term="mysql"></category><category term="ha"></category></entry><entry><title>关于错误处理的方式</title><link href="http://blog.atomd.me/posts/technology/exception-notes/" rel="alternate"></link><updated>2013-04-08T12:34:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2013-04-08:posts/technology/exception-notes/</id><summary type="html">&lt;p&gt;以下摘自《代码大全2》第8章防御式编程8.4异常。&lt;/p&gt;
&lt;h2&gt;异常：&lt;/h2&gt;
&lt;p&gt;异常和继承有一点是相同的，即：审慎明智地使用，可以&lt;strong&gt;降低复杂度&lt;/strong&gt;；而草率粗心使用时，只会让&lt;strong&gt;代码变地难以理解&lt;/strong&gt;。&lt;/p&gt;
&lt;h5&gt;用异常通知程序地其它部分，发生了不可忽视的错误。&lt;/h5&gt;
&lt;p&gt;提供了一种无法被忽略的错误通知机制。&lt;/p&gt;
&lt;h5&gt;只在真正例外的情况下才抛出异常&lt;/h5&gt;
&lt;p&gt;再其它编码实践方法无法解决的情况下才使用异常，处理不仅罕见甚至永远不会发生的情况。
一方面提供了处理意料之外的情况的强有力的方法，但同时弱化了封装、增加了复杂性，调用方需要了解代码可能抛出的异常。&lt;/p&gt;
&lt;h4&gt;不能用异常来推卸责任&lt;/h4&gt;
&lt;p&gt;可以在局部处理的错误就应该在局部处理。&lt;/p&gt;
&lt;h4&gt;避免在构造和析构函数抛出异常，除非在同一地方捕获。&lt;/h4&gt;
&lt;p&gt;主要针对c++吧&lt;/p&gt;
&lt;h4&gt;在恰当的抽象层次抛出异常&lt;/h4&gt;
&lt;p&gt;如果决定把一个异常传给调用方，确保异常的抽象层次与接口的抽象层次是一致的。也就不能把底层异常抛出。&lt;/p&gt;
&lt;h4&gt;在异常中加入关于导致异常发生的全部信息&lt;/h4&gt;
&lt;p&gt;主要针对c++&lt;/p&gt;
&lt;h4&gt;考虑创建一个集中的异常报告机制&lt;/h4&gt;
&lt;p&gt;把错误集中在一个全局的错误处理子程序或对象&lt;/p&gt;
&lt;h4&gt;把项目对异常的使用标准化&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;为可以抛出哪些种类的异常建立标砖。&lt;/li&gt;
&lt;li&gt;考虑建立项目的特定异常类，可以作为项目中抛出异常的基类。&lt;/li&gt;
&lt;li&gt;规定在何种场合允许代码使用throw－catch语句在局部对错误进行处理。&lt;/li&gt;
&lt;li&gt;规定在何种场合允许代码抛出不在局部对错误进行处理的异常。&lt;/li&gt;
&lt;li&gt;确定是否使用集中的的异常报考机制。&lt;/li&gt;
&lt;li&gt;是否在构造和析构函数中使用异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;考虑异常的替换方案&lt;/h4&gt;
&lt;p&gt;仅仅因为编程语言提供了异常处理机制而使用异常，是典型的“为了使用而使用”。在处理错误时，应该自始至终考虑各种错误处理机制：在局部处理错误，使用错误码来传递错误等。&lt;strong&gt;最后请你考虑你的程序是否真的需要异常。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;之前摘录这部分是源于讨论出错后使用异常，还是使用返回错误码的形式。其实焦点是围绕模块接口的错误反馈和局部的错误处理两种情况。有时两种情况很混淆，我是觉得使用异常来对局部进行错误处理是个很好的选择，但不宜抛出层次过深。&lt;/p&gt;
&lt;p&gt;还有一种情况就是会过度使用异常，表现在使用异常来控制程序逻辑，其实这是不需要的，完全可以通过简单的判断来实现，异常反而会增加复杂度。&lt;/p&gt;</summary><category term="exception"></category><category term="notes"></category></entry><entry><title>使用Nginx构建Web应用程序</title><link href="http://blog.atomd.me/posts/technology/build-web-applications-with-nginx/" rel="alternate"></link><updated>2013-04-06T20:03:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2013-04-06:posts/technology/build-web-applications-with-nginx/</id><summary type="html">&lt;p&gt;&lt;em&gt;This is originated from a share of the internal. Almost all the work is based on Openresty of agentzh, and some of the examples are retrieved from the wiki directly.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Build Web applications with Nginx&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;high-performance&lt;/li&gt;
&lt;li&gt;small memory footprint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;apache&lt;/strong&gt; threaded or process-oriented model.
&lt;strong&gt;nginx&lt;/strong&gt; asynchronous event-driven model (I/O multiplexing)
nginx is a web application framework.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;Apache server utilizes "embedded interpreter" approach. Dynamic content is typically handed off to CGI, FastCGI. And Nginx's ability to efficiently serve static content and deal with high concurrency.&lt;/p&gt;
&lt;p&gt;And how to use Nginx to handle dynamic content and to build a web app?
&lt;em&gt;web server / proxy server / mail proxy server&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;The Basics of Nginx&lt;/h2&gt;
&lt;h3&gt;Basic configuration : &lt;em&gt;nginx.conf&lt;/em&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#nginx.conf&lt;/span&gt;
&lt;span class="k"&gt;worker_processes&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;worker_connections&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;tornado&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9876&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kn"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;www.zhihu.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://tornado&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note:
3 hierarchies:http -&amp;gt; server -&amp;gt; location&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;HTTP request processing phases&lt;/h3&gt;
&lt;p&gt;The directives are not executed by sequential order&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NGX_HTTP_SERVER_REWRITE_PHASE&lt;/li&gt;
&lt;li&gt;NGX_HTTP_FIND_CONFIG_PHASE(no handler)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NGX_HTTP_REWRITE_PHASE&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;NGX_HTTP_POST_REWRITE_PHASE(no handler)&lt;/li&gt;
&lt;li&gt;NGX_HTTP_PREACCESS_PHASE&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NGX_HTTP_ACCESS_PHASE&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;NGX_HTTP_POST_ACCESS_PHASE(no handler)&lt;/li&gt;
&lt;li&gt;NGX_HTTP_TRY_FILES_PHASE(no handler)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NGX_HTTP_CONTENT_PHASE&lt;/strong&gt;(only one handler can take effect)&lt;/li&gt;
&lt;li&gt;NGX_HTTP_LOG_PHASE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the phase of request URI transformation on virtual server level;&lt;/li&gt;
&lt;li&gt;the phase of configuration location lookup;&lt;/li&gt;
&lt;li&gt;the phase of request URI transformation on location level;&lt;/li&gt;
&lt;li&gt;request URI transformation post-processing phase;&lt;/li&gt;
&lt;li&gt;access restrictions check preprocessing phase;&lt;/li&gt;
&lt;li&gt;access restrictions check phase;&lt;/li&gt;
&lt;li&gt;access restrictions check post-processing phase;&lt;/li&gt;
&lt;li&gt;try_files directive processing phase;&lt;/li&gt;
&lt;li&gt;content generation phase;&lt;/li&gt;
&lt;li&gt;logging phase.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;variable&lt;/h3&gt;
&lt;h4&gt;built-in variables &lt;a href="http://wiki.nginx.org/HttpCoreModulehttp://wiki.nginx.org/HttpCoreModule"&gt;http://wiki.nginx.org/HttpCoreModule&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;$content_type&lt;/span&gt;
&lt;span class="nv"&gt;$args&lt;/span&gt;
&lt;span class="nv"&gt;$request_method&lt;/span&gt;
&lt;span class="nv"&gt;$arg_PARAMETER&lt;/span&gt;
&lt;span class="nv"&gt;$http_HEADER&lt;/span&gt;
&lt;span class="nv"&gt;$sent_http_HEADER&lt;/span&gt;
&lt;span class="nv"&gt;$cookie_COOKIE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;self-built variables&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$tmp&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$hi&lt;/span&gt; &lt;span class="s"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$greeting&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$hi,&lt;/span&gt; &lt;span class="nv"&gt;$cookie_user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$hill&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;${hi}ll&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;exmaple&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_user_agent&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;MSIE)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;rewrite&lt;/span&gt;  &lt;span class="s"&gt;^(.*)&lt;/span&gt;$  &lt;span class="s"&gt;/msie/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;  &lt;span class="s"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;rewrite&lt;/span&gt;  &lt;span class="s"&gt;^/users/(.*)&lt;/span&gt;$  &lt;span class="s"&gt;/show?user=&lt;/span&gt;&lt;span class="nv"&gt;$1?&lt;/span&gt;  &lt;span class="s"&gt;last&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request_method&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;POST&lt;/span&gt; &lt;span class="s"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;405&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Nginx configure file notation is a small language.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wiki.nginx.org/IfIsEvil"&gt;If Is Evil - http://wiki.nginx.org/IfIsEvil&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;subrequest&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;modules can perform multiple subrequests and combine the outputs into a single response&lt;/li&gt;
&lt;li&gt;subrequests can perform their own sub-subrequests, and sub-subrequests can initiate sub-sub-subrequests…&lt;/li&gt;
&lt;li&gt;parallel subrequests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;With subrequests, you can return the results of a different URL than what the client originally requested.&lt;/p&gt;
&lt;p&gt;It's also possible to issue several subrequests at once without waiting for previous subrequests to finish.&lt;/p&gt;
&lt;h3&gt;example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/private/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://tornado&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;auth_request&lt;/span&gt; &lt;span class="s"&gt;/auth&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/auth&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$cookie_user&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://tornado&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Handle GET request &amp;amp;&amp;amp; ngx_echo_module&lt;/h2&gt;
&lt;h3&gt;hello world&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/hello&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$person&lt;/span&gt; &lt;span class="nv"&gt;$arg_person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;set_if_empty&lt;/span&gt; &lt;span class="nv"&gt;$person&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;anonymous&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello,&lt;/span&gt; &lt;span class="nv"&gt;$person&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;unescape url parameters&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/hello&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set_unescape_uri&lt;/span&gt; &lt;span class="nv"&gt;$person&lt;/span&gt; &lt;span class="nv"&gt;$arg_person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;set_if_empty&lt;/span&gt; &lt;span class="nv"&gt;$person&lt;/span&gt; &lt;span class="s"&gt;anonymous&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello,&lt;/span&gt; &lt;span class="nv"&gt;$person&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;issue subrequests&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/series&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;echo_location&lt;/span&gt; &lt;span class="s"&gt;/sub1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;echo_subrequest_async&lt;/span&gt; &lt;span class="s"&gt;POST&lt;/span&gt; &lt;span class="s"&gt;/sub2&lt;/span&gt; &lt;span class="s"&gt;-b&lt;/span&gt; &lt;span class="s"&gt;world&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/sub1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/sub2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$echo_request_body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;series &amp;amp;&amp;amp; parallel&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/series&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;echo_location&lt;/span&gt; &lt;span class="s"&gt;/sub1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;echo_subrequest_async&lt;/span&gt; &lt;span class="s"&gt;POST&lt;/span&gt; &lt;span class="s"&gt;/sub2&lt;/span&gt; &lt;span class="s"&gt;-b&lt;/span&gt; &lt;span class="s"&gt;world&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/parallel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;echo_reset_timer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;echo_location_async&lt;/span&gt; &lt;span class="s"&gt;/sub1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;echo_subrequest_async&lt;/span&gt; &lt;span class="s"&gt;POST&lt;/span&gt; &lt;span class="s"&gt;/sub2&lt;/span&gt; &lt;span class="s"&gt;-b&lt;/span&gt; &lt;span class="s"&gt;world&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;took&lt;/span&gt; &lt;span class="nv"&gt;$echo_timer_elapsed&lt;/span&gt; &lt;span class="s"&gt;sec&lt;/span&gt; &lt;span class="s"&gt;for&lt;/span&gt; &lt;span class="s"&gt;total.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/sub1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;echo_sleep&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# sleeps 2 sec&lt;/span&gt;
    &lt;span class="kn"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/sub2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;echo_sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# sleeps 1 sec&lt;/span&gt;
    &lt;span class="kn"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$echo_request_body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;result&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;curl http://gentoo1:9991/series
hello
world
took 2.018 sec &lt;span class="k"&gt;for &lt;/span&gt;total.

real    0m3.034s
user    0m0.000s
sys 0m0.000s

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;curl http://gentoo1:9991/parallel
hello
world
took 0.000 sec &lt;span class="k"&gt;for &lt;/span&gt;total.

real    0m2.022s
user    0m0.000s
sys 0m0.000s
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;ngx_drizzle for MySQl and Drizzle&lt;/h2&gt;
&lt;h3&gt;non-blocking&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;mysql_backend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;drizzle_server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3306&lt;/span&gt; &lt;span class="s"&gt;dbname=nginx_test&lt;/span&gt;
        &lt;span class="s"&gt;password=&lt;/span&gt; &lt;span class="s"&gt;user=root&lt;/span&gt;
        &lt;span class="s"&gt;protocol=mysql&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;drizzle_keepalive&lt;/span&gt; &lt;span class="s"&gt;max=200&lt;/span&gt; &lt;span class="s"&gt;overflow=reject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;&amp;#39;^/foo/(\d+)$&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;drizzle_query&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;select&lt;/span&gt; &lt;span class="s"&gt;*&lt;/span&gt; &lt;span class="s"&gt;from&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="s"&gt;where&lt;/span&gt; &lt;span class="s"&gt;a=&lt;/span&gt;&lt;span class="nv"&gt;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;drizzle_pass&lt;/span&gt; &lt;span class="s"&gt;mysql_backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;rds_json&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;cluster hashing&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kn"&gt;drizzle_server&lt;/span&gt; &lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kn"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;B&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kn"&gt;drizzle_server&lt;/span&gt; &lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kn"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;C&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;drizzle_server&lt;/span&gt; &lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kn"&gt;upstream_list&lt;/span&gt; &lt;span class="s"&gt;my_cluster&lt;/span&gt; &lt;span class="s"&gt;A&lt;/span&gt; &lt;span class="s"&gt;B&lt;/span&gt; &lt;span class="s"&gt;C&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="s"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;&amp;#39;^/name/(.*)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;set_quote_sql_str&lt;/span&gt; &lt;span class="nv"&gt;$quoted_name&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;drizzle_query&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;select&lt;/span&gt; &lt;span class="s"&gt;*&lt;/span&gt; &lt;span class="s"&gt;from&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt;
       &lt;span class="s"&gt;where&lt;/span&gt; &lt;span class="s"&gt;name=&lt;/span&gt;&lt;span class="nv"&gt;$quoted_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;set_hashed_upstream&lt;/span&gt; &lt;span class="nv"&gt;$backend&lt;/span&gt; &lt;span class="s"&gt;my_cluster&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;drizzle_pass&lt;/span&gt; &lt;span class="nv"&gt;$backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;rds_json&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;ngx_postgres for PostgreSQL&lt;/h2&gt;
&lt;p&gt;Note: pass quickly&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;ngx_srcache &amp;amp;&amp;amp; ngx_srcache&lt;/h2&gt;
&lt;h3&gt;General location response cache based on Nginx subrequests&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/memc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;set_unescape_uri&lt;/span&gt; &lt;span class="nv"&gt;$memc_key&lt;/span&gt; &lt;span class="nv"&gt;$arg_key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$memc_exptime&lt;/span&gt; &lt;span class="nv"&gt;$arg_exptime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;memc_pass&lt;/span&gt; &lt;span class="s"&gt;memc_pass&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11211&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/api&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$uri?$args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;srcache_fetch&lt;/span&gt; &lt;span class="s"&gt;GET&lt;/span&gt; &lt;span class="s"&gt;/memc&lt;/span&gt; &lt;span class="s"&gt;key=&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;srcache_store&lt;/span&gt; &lt;span class="s"&gt;PUT&lt;/span&gt; &lt;span class="s"&gt;/memc&lt;/span&gt; &lt;span class="s"&gt;key=&lt;/span&gt;&lt;span class="nv"&gt;$key&amp;amp;exptime=3600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# proxy_pass/drizzle_pass/postgres_pass/etc&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;ngx_redis2 for Redis&lt;/h2&gt;
&lt;h3&gt;multiple pipelined queries&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;keepalive&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="s"&gt;single&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="s"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set_unescape_uri&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="nv"&gt;$arg_key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;set_unescape_uri&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt; &lt;span class="nv"&gt;$arg_val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kn"&gt;redis2_query&lt;/span&gt; &lt;span class="s"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;redis2_query&lt;/span&gt; &lt;span class="s"&gt;get&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;redis2_pass&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;ngx_lua&lt;/h2&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;set_by_lua&lt;/li&gt;
&lt;li&gt;set_by_lua_file&lt;/li&gt;
&lt;li&gt;content_by_lua&lt;/li&gt;
&lt;li&gt;content_by_lua_file&lt;/li&gt;
&lt;li&gt;rewrite_by_lua&lt;/li&gt;
&lt;li&gt;rewrite_by_lua_file&lt;/li&gt;
&lt;li&gt;access_by_lua&lt;/li&gt;
&lt;li&gt;access_by_lua_file&lt;/li&gt;
&lt;li&gt;header_filter&lt;/li&gt;
&lt;li&gt;header_filter_by_lua_file&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ngx_auth_request&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;location / {
    access_by_lua &amp;#39;
        local res = ngx.location.capture(&amp;quot;/auth&amp;quot;)

        if res.status == ngx.HTTP_OK then
            return
        end

        if res.status == ngx.HTTP_FORBIDDEN then
            ngx.exit(res.status)
        end

        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
    &amp;#39;;

    # proxy_pass/fastcgi_pass/postgres_pass/...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Multiple concurrent subrequests in Lua&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;location = /api {
    content_by_lua &amp;#39;
        local res1, res2, res3 =
            ngx.location.capture_multi{
                {&amp;quot;/memc&amp;quot;}, {&amp;quot;/mysql&amp;quot;}, {&amp;quot;/postgres&amp;quot;}
            }
        ngx.say(res1.body, res2.body, res3.body)
    &amp;#39;;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;accessing upstream services in Lua&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;location /access_google {
    content_by_lua &amp;#39;
    local sock = ngx.socket.tcp()
    local ok, err = sock:connect(&amp;quot;www.google.com&amp;quot;, 80)
    if not ok then
        ngx.say(&amp;quot;failed to connect to google: &amp;quot;, err)
        return
    end
    ngx.say(&amp;quot;successfully connected to google!&amp;quot;)
    sock:close()
 &amp;#39;;}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;High-level Lua libraries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;lua-resty-mysql&lt;/li&gt;
&lt;li&gt;lua-resty-memcached&lt;/li&gt;
&lt;li&gt;lua-resty-redis&lt;/li&gt;
&lt;li&gt;lua-resty-upload&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;exmaple of lua-resty-redis&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;content_by_lua &amp;#39;
    local redis = require &amp;quot;resty.redis&amp;quot;
    local red = redis:new()
    local ok, err = red:connect(&amp;quot;127.0.0.1&amp;quot;, 6379)
    if not ok then
        ngx.say(&amp;quot;failed to connect: &amp;quot;, err)
        return
    end
    res, err = red:set(&amp;quot;dog&amp;quot;, &amp;quot;an aniaml&amp;quot;)
    if not ok then
        ngx.say(&amp;quot;failed to set dog: &amp;quot;, err)
        return
    end
    ngx.say(&amp;quot;set result: &amp;quot;, res)
    red:set_keepalive(0, 100)
&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://openresty.com/"&gt;http://openresty.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.martinfjordvald.com/2010/07/nginx-primer/"&gt;http://blog.martinfjordvald.com/2010/07/nginx-primer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nginxguts.com/2011/01/phases/"&gt;http://www.nginxguts.com/2011/01/phases/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.evanmiller.org/nginx-modules-guide-advanced.html"&gt;http://www.evanmiller.org/nginx-modules-guide-advanced.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sina.com.cn/s/articlelist_1834459124_1_1.html"&gt;http://blog.sina.com.cn/s/articlelist_1834459124_1_1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruby-forum.com/topic/205063"&gt;http://www.ruby-forum.com/topic/205063&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.nginx.org/HttpEchoModule#echo_subrequest"&gt;http://wiki.nginx.org/HttpEchoModule#echo_subrequest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary><category term="nginx configuration web"></category></entry><entry><title>一些 Git 的小技巧</title><link href="http://blog.atomd.me/posts/technology/git-tips/" rel="alternate"></link><updated>2013-03-10T19:03:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2013-03-10:posts/technology/git-tips/</id><summary type="html">&lt;p&gt;如果将多个Commit合并成一个，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git reset --soft HEAD^1
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit --amend
&lt;/pre&gt;&lt;/div&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary><category term="git"></category><category term="tips"></category></entry><entry><title>Hadoop学习笔记</title><link href="http://blog.atomd.me/posts/technology/hadoop-study-notes/" rel="alternate"></link><updated>2013-01-13T19:03:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2013-01-13:posts/technology/hadoop-study-notes/</id><summary type="html">&lt;p&gt;因为实验室的项目要用到Hadoop，参加了ChinaHadoop办的Hadoop大数据平台的在线培训。用的是YY的平台，第一次用感觉问题不少，尤其是其中的白板功能。我觉得不管上课还是自学都取决于交流的质量。如果真的有富有经验的人愿意传道授业解惑，并且没有交流障碍，无疑会有很大的帮助，也会避免走很多弯路，这样的课是用很大价值的，完全值得300的价格。这里也推荐下这个课:)&lt;/p&gt;
&lt;h3&gt;虚拟机配置和相关软件&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;机器角色&lt;/th&gt;
&lt;th align="center"&gt;IP&lt;/th&gt;
&lt;th align="center"&gt;机器名&lt;/th&gt;
&lt;th align="center"&gt;用户名&lt;/th&gt;
&lt;th align="center"&gt;配置&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Master + Slave1&lt;/td&gt;
&lt;td align="center"&gt;192.168.32.111&lt;/td&gt;
&lt;td align="center"&gt;X001&lt;/td&gt;
&lt;td align="center"&gt;hadoop&lt;/td&gt;
&lt;td align="center"&gt;内存1G，硬盘20G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Slave2&lt;/td&gt;
&lt;td align="center"&gt;192.168.32.112&lt;/td&gt;
&lt;td align="center"&gt;X002&lt;/td&gt;
&lt;td align="center"&gt;hadoop&lt;/td&gt;
&lt;td align="center"&gt;内存724M, 硬盘20G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Slave3&lt;/td&gt;
&lt;td align="center"&gt;192.168.32.113&lt;/td&gt;
&lt;td align="center"&gt;X003&lt;/td&gt;
&lt;td align="center"&gt;hadoop&lt;/td&gt;
&lt;td align="center"&gt;内存724M，硬盘20G&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;VMware Workstation 9.0&lt;/li&gt;
&lt;li&gt;ubuntu-12.04.1-desktop-i386.iso&lt;/li&gt;
&lt;li&gt;hadoop: hadoop-1.0.4.tar.gz&lt;/li&gt;
&lt;li&gt;Java JDK: jdk-7u7-linux-i586.tar.gz&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Hadoop集群的安装和配置&lt;/h3&gt;
&lt;h4&gt;创建虚拟机X001&lt;/h4&gt;
&lt;h5&gt;配置网络&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;将网卡配置NET的方式。这样虚拟机的网络环境不随宿主机的网络环境变化，而且可以和外网连接。&lt;/li&gt;
&lt;li&gt;配置IP 192.168.32.11，掩码 255.255.255.0，网关 192.168.32.2, DNS 192.168.32.2。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;更新软件&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;安装SSH&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install ssh
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;修改配置文件&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo vim /etc/ssh/ssh_config
StrictHostKeyChecking no

&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service ssh restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;修改hostname为X001&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo vi /etc/hostname
X001
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;修改hosts&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim /etc/hosts

127.0.0.1   localhost
127.0.1.1   X001-local
192.168.1.111   X001
192.168.1.112   X002
192.168.1.113   X003
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;下载hadoop和Java&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;hadoop: hadoop-1.0.4.tar.gz&lt;/li&gt;
&lt;li&gt;Java JDK: jdk-7u7-linux-i586.tar.gz&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;如果通过ftp上传可以安装vsftpd：&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install vsftpd
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo vi /etc/vsftpd.conf

&lt;span class="nv"&gt;listen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
&lt;span class="nv"&gt;anonymous_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NO
&lt;span class="nv"&gt;local_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
&lt;span class="nv"&gt;write_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
&lt;span class="nv"&gt;local_umask&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;022
&lt;span class="nv"&gt;anon_upload_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
&lt;span class="nv"&gt;dirmessage_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
&lt;span class="nv"&gt;use_localtime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
&lt;span class="nv"&gt;xferlog_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
&lt;span class="nv"&gt;connect_from_port_20&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
&lt;span class="nv"&gt;async_abor_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
&lt;span class="nv"&gt;ascii_upload_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
&lt;span class="nv"&gt;ascii_download_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
&lt;span class="nv"&gt;secure_chroot_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/run/vsftpd/empty
&lt;span class="nv"&gt;pam_service_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;vsftpd
&lt;span class="nv"&gt;rsa_cert_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/ssl/private/vsftpd.pem

&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service vsftpd restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安装Java&lt;/h4&gt;
&lt;h5&gt;切换为root用户&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo su -
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;解压到/usr/java目录下&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar -xvf /usr/java/jdk-7u7-linux-i586.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;设置JAVA环境变量，修改/etc/profile，在文件尾部加入&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo vim /etc/profile

&lt;span class="c"&gt;# set java env&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/java/jdk1.7.0_07
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;JRE_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/java/jdk1.7.0_07/jre
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CLASSPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;.:&lt;span class="nv"&gt;$CLASSPATH&lt;/span&gt;:&lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;/lib:&lt;span class="nv"&gt;$JRE_HOME&lt;/span&gt;/lib
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:&lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;/bin:&lt;span class="nv"&gt;$JRE_HOME&lt;/span&gt;/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;测试安装&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; /etc/profile
&lt;span class="nv"&gt;$ &lt;/span&gt;java -version
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安装Hadoop&lt;/h4&gt;
&lt;h5&gt;切换为hadoop用户&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo su hadoop
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;解压在目录/usr/hadoop-1.0.4&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar -xvf /usr/hadoop-1.0.4.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;切换为root用户&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo su -
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;修改/etc/profile，设置Hadoop环境变量&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo vim /etc/profile

&lt;span class="c"&gt;# set hadoop env&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HADOOP_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/hadoop-1.0.4
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:&lt;span class="nv"&gt;$HADOOP_HOME&lt;/span&gt;/bin
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HADOOP_HOME_WARN_SUPPRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;使环境生效&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; /etc/profile
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;hadoop的基本配置(/usr/hadoop-1.0.4/conf)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim hadoop-env.sh
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/java/jdk1.7.0_07
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;修改core-site.xml，tmp.dir不要放在/tmp下&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim core-site.xml

&amp;lt;configuration&amp;gt;
&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;hadoop.tmp.dir&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;/usr/hadoop-1.0.4/tmp.dir&amp;lt;/value&amp;gt;
    &amp;lt;description&amp;gt;A base &lt;span class="k"&gt;for &lt;/span&gt;other temporary dirs.&amp;lt;/description&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;fs.default.name&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;hdfs://192.168.32.111:9000&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;修改 hdfs-site.xml， permision为false是为了开发方便，replication副本数为2（缺省值为3），因为测试环境中一共是3个节点。&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim hdfs-site.xml

&amp;lt;configuration&amp;gt;
&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;2&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.permissions&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;修改mapred-site.xml&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim mapred-site.xml
&amp;lt;configuration&amp;gt;
&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;mapred.job.tracker&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;http://192.168.32.111:9001&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;修改masters和slaves文件&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat masters
192.168.32.111

&lt;span class="nv"&gt;$ &lt;/span&gt;cat slaves
192.168.32.111
192.168.32.112
192.168.32.113
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;通过vmware 克隆出X002和X003&lt;/h4&gt;
&lt;h5&gt;按照X001的方式对Ip、 Hostname、Hosts进行修改&lt;/h5&gt;
&lt;h5&gt;分配对三个节点配置SSH无密码登陆&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-keygen -t rsa -f ~/.ssh/id_rsa -P &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-copy-id hadoop@X001
&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-copy-id hadoop@X002
&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-copy-id hadoop@X003
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就完成3个节点的hadoop的测试环境的搭建&lt;/p&gt;
&lt;h3&gt;测试基本功能&lt;/h3&gt;
&lt;h4&gt;在master机器上，格式化HDFS文件系统&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hadoop@X001:~&lt;span class="nv"&gt;$ &lt;/span&gt;hadoop namenode -format
...
1.0.4/tmp.dir/dfs/name has been successfully formatted.
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;启动Hadoop&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hadoop@X001:~&lt;span class="nv"&gt;$ &lt;/span&gt;start-all.sh

starting namenode, logging to /usr/hadoop-1.0.4/libexec/../logs/hadoop-hadoop-namenode-X001.out
192.168.32.112: starting datanode, logging to /usr/hadoop-1.0.4/libexec/../logs/hadoop-hadoop-datanode-X002.out
192.168.32.113: starting datanode, logging to /usr/hadoop-1.0.4/libexec/../logs/hadoop-hadoop-datanode-X003.out
192.168.32.111: starting datanode, logging to /usr/hadoop-1.0.4/libexec/../logs/hadoop-hadoop-datanode-X001.out
192.168.32.111: starting secondarynamenode, logging to /usr/hadoop-1.0.4/libexec/../logs/hadoop-hadoop-secondarynamenode-X001.out
starting jobtracker, logging to /usr/hadoop-1.0.4/libexec/../logs/hadoop-hadoop-jobtracker-X001.out
192.168.32.112: starting tasktracker, logging to /usr/hadoop-1.0.4/libexec/../logs/hadoop-hadoop-tasktracker-X002.out
192.168.32.113: starting tasktracker, logging to /usr/hadoop-1.0.4/libexec/../logs/hadoop-hadoop-tasktracker-X003.out
192.168.32.111: starting tasktracker, logging to /usr/hadoop-1.0.4/libexec/../logs/hadoop-hadoop-tasktracker-X001.out
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;查看启动进程&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hadoop@X001:~&lt;span class="nv"&gt;$ &lt;/span&gt;jps
7740 DataNode
7516 NameNode
8427 Jps
8271 TaskTracker
7956 SecondaryNameNode
8039 JobTracker

hadoop@X002:~&lt;span class="nv"&gt;$ &lt;/span&gt;jps
4722 DataNode
4960 Jps
4915 TaskTracker
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;通过Web查看节点状态&lt;/h4&gt;
&lt;p&gt;访问http://192.168.32.111:50030 或 http://192.168.32.111:50070 来查看集群的相关信息&lt;/p&gt;
&lt;h3&gt;从集群删除节点&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;在主节点即namenode进行操作&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;修改conf/hdfs-site.xml文件&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim hdfs-site.xml

&amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;dfs.hosts.exclude&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;/usr/hadoop-1.0.4/conf/excludes&amp;lt;/value&amp;gt;
        &amp;lt;final&amp;gt;true&amp;lt;/final&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;在excludes文件中加入X002&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat excludes
X002
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;查看当前报告，可以发现所有节点的状态都是Normal&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;hadoop dfsadmin -report

...
-------------------------------------------------
Datanodes available: 3 &lt;span class="o"&gt;(&lt;/span&gt;3 total, 0 dead&lt;span class="o"&gt;)&lt;/span&gt;

Name: 192.168.32.112:50010
Decommission Status : Normal
...

Name: 192.168.32.113:50010
Decommission Status : Normal
...

Name: 192.168.32.111:50010
Decommission Status : Normal
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;执行refreshNodes命令&lt;/h4&gt;
&lt;p&gt;可以动态刷新dfs.hosts和dfs.hosts.exclude配置，无需重启NameNode&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;hadoop dfsadmin -report

...
-------------------------------------------------
Datanodes available: 2 &lt;span class="o"&gt;(&lt;/span&gt;3 total, 1 dead&lt;span class="o"&gt;)&lt;/span&gt;

Name: 192.168.32.113:50010
Decommission Status : Normal
...

Name: 192.168.32.111:50010
Decommission Status : Normal
...

Name: 192.168.32.112:50010
Decommission Status : Decommissioned
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;查看当前报告，观察X002节点的状态&lt;/h4&gt;
&lt;p&gt;可以发现X002节点的状态变为了Decommission in progress，等到当要删除的节点状态变为Decommission Status : Decommissioned 时，数据已经备份，并且完成删除操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在删除节点执行操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;refreshNode会停掉datanode，但是没有停掉tasktracker,所以需要执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;hadoop-daemon.sh stop tasktracker
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;添加节点，进行负载均衡&lt;/h3&gt;
&lt;h4&gt;该节点上清空dfs/data/current 目录下文件&lt;/h4&gt;
&lt;p&gt;为负载重新平衡做准备&lt;/p&gt;
&lt;h4&gt;从excludes文件中移除，再次refreshNodes&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim excludes
&lt;span class="nv"&gt;$ &lt;/span&gt;hadoop dfsadmin -refreshNodes
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;在X002节点上启动datanode和tasktracker&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hadoop@X002:/usr/hadoop-1.0.4&lt;span class="nv"&gt;$ &lt;/span&gt;hadoop-daemon.sh start datanode
hadoop@X002:/usr/hadoop-1.0.4&lt;span class="nv"&gt;$ &lt;/span&gt;hadoop-daemon.sh start tasktracker
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;等到主节点检测新增节点X002后，完成负载均衡&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;start-balancer.sh
//wait ... ...
&lt;span class="nv"&gt;$ &lt;/span&gt;tail logs/hadoop-hadoop-balancer-X002.out
...
The cluster is balanced. Exiting...
Balancing took 2.651883333333333 minutes
&lt;/pre&gt;&lt;/div&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary><category term="hadoop"></category><category term="installation"></category><category term="configuration"></category></entry><entry><title>那些年 那些项目</title><link href="http://blog.atomd.me/posts/essay/those-years-those-projects/" rel="alternate"></link><updated>2012-11-25T19:03:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2012-11-25:posts/essay/those-years-those-projects/</id><summary type="html">&lt;p&gt;以下想写的是我的一部分，没有在潘多拉盒子里的一部分:)&lt;/p&gt;
&lt;p&gt;98年前后，家里就有了一台电脑，小学五年级为参加Flash制作比赛而赢得了一台价值不菲的MP3。因为能折腾，我算是精通各种常用软件，尤其是当时的杀毒软件。不过当时很多同学他们很热衷电脑，现在想想可能是因为游戏的原因。他们自己攒电脑，买《电脑报》、《微型计算机》等相关杂志，谈论各种最新硬件的性能。印象比较深的是初中的时候，CZ给我讲主板上南北桥的功能和一些参数，还有那个时候阿黄就可以用QBasic解数学题。我当时一直觉得自己在小白用户里算是电脑高手，没有必要进入那个世界了。所以在大学以前没有想过会选择计算机为专业，但有些事情的确会阴差阳错的改变自己设定的人生轨迹，就比如高考。&lt;/p&gt;
&lt;p&gt;到了国软，我除了会用电脑外，没有任何的优势，尤其相比于竞赛进来的同学。当时C++课上留了一个打印日历的作业，其实就是实现cal命令，我为了打印的漂亮还花了不少时间。的确不能想象依靠这样简单的语句怎能构建出一个软件一个系统。当时我记得Dis从图书馆借了CVS和JS的书，没事还在折腾他基于WP的Blog。而我那时只能听听课，看最基础的书，我花了点时间看什么是版本管理，一头雾水。我想还是转院好了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;未完待续&lt;/em&gt;&lt;/p&gt;</summary><category term="memory"></category><category term="college"></category><category term="project"></category></entry><entry><title>路由交换技术的基本概念</title><link href="http://blog.atomd.me/posts/technology/basic-concept-of-routing-and-switching/" rel="alternate"></link><updated>2012-11-19T19:03:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2012-11-19:posts/technology/basic-concept-of-routing-and-switching/</id><summary type="html">&lt;p&gt;前两天上课总结了基本的路由交换技术，澄清了一些概念，这里记录下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;电路交换(circuit switching)：一次消息传递独占一条通路，到达目的结点后才释放。&lt;/li&gt;
&lt;li&gt;存储转发(store and forward)：整个消息(包)在向下一结点发送前完全缓存在一个中间结点。&lt;/li&gt;
&lt;li&gt;包交换(packet switching)：将消息分成若干较小的消息包(packets)，每个包以存储转发的方式发送。&lt;/li&gt;
&lt;li&gt;虚切入(virtual cut through — VCT)：路由收到包头信息后不必等待包尾到达，就向下一级路由传送，只有堵塞时才缓冲起来等待。&lt;/li&gt;
&lt;li&gt;蛀洞路由(Wormhole routing)：每个结点只有少量缓冲，一旦堵塞就像虫一样摆在路上，不堵塞时继续前进，消息包无需进入结点机的内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相关比较&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;#&lt;/th&gt;
&lt;th align="center"&gt;总延迟&lt;/th&gt;
&lt;th align="left"&gt;缓冲区&lt;/th&gt;
&lt;th align="center"&gt;占用结点数(通道数)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;虚切入&lt;/td&gt;
&lt;td align="center"&gt;短&lt;/td&gt;
&lt;td align="left"&gt;大&lt;/td&gt;
&lt;td align="center"&gt;较多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;蛀洞路由&lt;/td&gt;
&lt;td align="center"&gt;短&lt;/td&gt;
&lt;td align="left"&gt;最小(不进内存)&lt;/td&gt;
&lt;td align="center"&gt;最多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;包交换&lt;/td&gt;
&lt;td align="center"&gt;长&lt;/td&gt;
&lt;td align="left"&gt;大&lt;/td&gt;
&lt;td align="center"&gt;2(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;存储转发&lt;/td&gt;
&lt;td align="center"&gt;长&lt;/td&gt;
&lt;td align="left"&gt;最大&lt;/td&gt;
&lt;td align="center"&gt;2(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;电路交换&lt;/td&gt;
&lt;td align="center"&gt;短&lt;/td&gt;
&lt;td align="left"&gt;/&lt;/td&gt;
&lt;td align="center"&gt;全部&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary><category term="network"></category></entry><entry><title>网络配置小记</title><link href="http://blog.atomd.me/posts/technology/network-configuration-notes/" rel="alternate"></link><updated>2012-11-19T19:03:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2012-11-19:posts/technology/network-configuration-notes/</id><summary type="html">&lt;h3&gt;网桥基本配置&lt;/h3&gt;
&lt;p&gt;在eth0上开启promisc混杂模式，建立网桥br-100后设置ip，并将eth0桥接到br-100上。&lt;/p&gt;
&lt;p&gt;配置如下，其中一些参数的含义详见: &lt;a href="http://linux.die.net/man/8/brctl"&gt;http://linux.die.net/man/8/brctl&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auto eth0
iface eth0 inet manual
    up ifconfig $IFACE 0.0.0.0 up
    up ip link set $IFACE promisc on
    down ip link set $IFACE promisc off
    down ifconfig $IFACE down

auto br-100
iface br-100 inet static
    address 192.168.5.91
    netmask 255.255.255.0
    network 192.168.5.0
    broadcast 192.168.5.255
    gateway 192.168.5.1
    bridge_ports eth0
    bridge_fd 0
    bridge_stp off
    # bridge_hello 2
    # bridge_maxage 12
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;bridge_stp&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;The Spanning Tree Protocol (STP) is used to allow multiple bridges
to work together. Each bridge communicates with other bridges to
discover how they are interconnected. This information is then used
to eliminate cycles, and provide optimal routing of packets. 
STP also provides fault tolerance, because it will recompute the
topology if a bridge or port fails.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;bridge_fd&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the forwarding delay for interfaces joining the bridge.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;双网卡配置&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;：这种配置方法是存在问题的，其基本原则在于&lt;strong&gt;不应该设定同一网段的不同IP在同一主机上&lt;/strong&gt;, 其原因见&lt;a href="http://vbird.dic.ksu.edu.tw/linux_server/0230router.php#routing_double"&gt;http://vbird.dic.ksu.edu.tw/linux_server/0230router.php#routing_double&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里不是为了增加主机的网络流量，而是测试下双网卡的工作模式，因为只有一个网关，也就只有采用这个方式了。分两个IP分给两个网卡接口：192.168.50.91、192.168.11.9，一个网关192.168.5.1。配置如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auto eth0
iface eth0 inet static
    address 192.168.50.91
    netmask 255.255.0.0
    gateway 192.168.5.1

auto eth1
iface eth1 inet static
    address 192.168.11.91
    netmask 255.255.0.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之前的配置出现了其中一个错误:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RTNETLINK answers: File exists &lt;br /&gt;
Failed to bring up eth1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其出现的原因在于eth0、eth1都配置了相同的gateway，导致会出现默认路由规则绑定到了两个接口上，因为冲突而失败。&lt;/p&gt;
&lt;p&gt;这种方式有潜在的问题，尽管可以用不同的IP来通过不同的网络接口访问主机，但是主机回复内容都是从一个网络接口出去的。我们可以通过 &lt;strong&gt;route -n&lt;/strong&gt; 来查看路由规则:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Destination  Gateway      Genmask      Flags  Metric Use Iface
0.0.0.0      192.168.5.1  0.0.0.0      UG     100    0 eth0
192.168.0.0  0.0.0.0      255.255.0.0  U      0      0 eth0
192.168.0.0  0.0.0.0      255.255.0.0  U      0      0 eth1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据路由规则和优先级，可以看出所有数据包都是eth0直接广播出去，而无需经过eth1。&lt;strong&gt;这样会造成负载均衡、防火墙无法正确配置，甚至会发生数据包传递错误&lt;/strong&gt;，这也是鸟哥说的『重复路由问题』。&lt;/p&gt;
&lt;p&gt;btw, @hellosa 说 bond 技术(双网卡绑定) 可以解决充分利用双网卡的问题，这是另外的话题，我等得空来看下相关的配置方法。&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary><category term="network"></category><category term="configuration"></category></entry><entry><title>高速缓存一致性的相关笔记和演讲稿</title><link href="http://blog.atomd.me/posts/technology/the-basic-of-scalable-cache-coherence/" rel="alternate"></link><updated>2012-10-28T19:03:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2012-10-28:posts/technology/the-basic-of-scalable-cache-coherence/</id><summary type="html">&lt;p&gt;我在计算机并行体系结构的课程上对高速缓存一致性进行了介绍。准备过程中我阅读了老师推荐的论文和书籍，也在互联网上查阅很多资料。&lt;/p&gt;
&lt;p&gt;我准备的内容基本涵盖了缓存一致性的大部分基础知识，包括基于监听和基于目录式的缓存一致性协议的概念及权衡因素，并介绍了斯坦福的DASH协议和基于目录的协议内存占用过大的优化方案，最后还探讨了伪共享和空间局部性对性能影响。&lt;/p&gt;
&lt;p&gt;这些偏底层的技术还是让我花了不少时间，应该庆幸自己不是基于硬件来做设计和开发。立竿见影的收获是提供了机器的视角给我，对于以前不太理解的多线程技巧也似乎找到了一些感觉。并外《并行计算机体系结构——硬件/软件结合的设计和分析》这本书内容很好，论述也清晰，神奇的是1998年出版的书到现在也没有过时。&lt;/p&gt;
&lt;p&gt;下面就是我做的演示文稿:)&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;The Role of Cache&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Reducing the average memory access time&lt;/li&gt;
&lt;li&gt;Reducing the bandwidth requirement&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="figure-1" src="http://blog.atomd.me/images/scalable-cache-coherence/common-memory-hierarchies-found-in-multiprocessors.png" /&gt;&lt;/p&gt;
&lt;p&gt;从存储器层次上看，程序员对存储器容量和速度的期望是无限的，但是和存储器的成本相矛盾。每一层都要从一个较大的存储器空间中把地址映射到一个较小的但是更快上层容器。而高速缓存就是介于CPU、寄存器与主存之间的一层。&lt;/p&gt;
&lt;p&gt;而高速缓存总是扮演着重要角色，对于处理器而言，高速缓存可以减少平均数据访问的时间。而对于共享的互连设备和存储系统而言，可以减少每个处理器需要的通信带宽。&lt;/p&gt;
&lt;p&gt;图中表明了四类层次模型，与多处理器的规模相对应。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(a) 图中是互连设备位于处理器和共享的一级高速缓存之间，而高速缓存连接到共享主存子系统上。处理器数量相对较少2-8个。&lt;/li&gt;
&lt;li&gt;(b) 图中是在基于总线的共享存储方式下，互连设备是共享总线，位于处理器的私有缓存和共享的主存子系统之间。适用于中小规模，可以支持20-30个处理器。&lt;/li&gt;
&lt;li&gt;(c) 图中，互连设备不一定是总线，而是点对点的互连网络。同时主存储器划分为许多的逻辑模块，并接入互连网络。这方式仍然是具有均匀的存储器访问模型。&lt;/li&gt;
&lt;li&gt;(d) 图中是分布式的存储方式，非对称的。可扩展的互联设备位于处理器节点之间，数据分散到每个处理器的本地主存中，由于处理器的私有缓存可以尽量减少跨网络的数据访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;名词&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DSM : 分布式共享存储器 ( Distributed shared memory )&lt;/li&gt;
&lt;li&gt;SMP : 对称多处理器技术 ( Symmetric multiprocessing )&lt;/li&gt;
&lt;li&gt;CC-NUMA : 一致性高速缓存非均匀存储访问模式 ( Cache Coherent Non-Uniform Memory Architecture )。主存在物理上是分布的，具有非均匀的访问代价，其每个节点可以看作SMP，实际上是一个DSM多处理机系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;The Cache Coherence Problem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pervasive and performance critical in multiprocessors.&lt;/li&gt;
&lt;li&gt;Each read should return the latest value written to that location.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="figure-2" src="http://blog.atomd.me/images/scalable-cache-coherence/example-cache-coherence-problem.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Write back cache&lt;/em&gt; or &lt;em&gt;Write through cache&lt;/em&gt; ? &lt;br /&gt;
&lt;em&gt;Write invalidate&lt;/em&gt;  or &lt;em&gt;Write update&lt;/em&gt; ？&lt;/p&gt;
&lt;p&gt;多处理器中的高速缓存一致性问题是普遍存在的，而且对计算机性能有着重大的影响。其中缓存一致性 （ Cache Coherence ) 保证的是： &lt;strong&gt;总是能读到最新写入的值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如图所示，每个处理器至少有一级的私有高速缓存，那么存储块的副本出现在一个或多个处理器的高速缓存中，那么怎么保证访问的是最新写入的值正是我们本文讨论的问题。&lt;/p&gt;
&lt;p&gt;面对高速缓存一致性问题，有两个基本的取舍点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通知机制：写失效协议 或者 写更新协议&lt;/li&gt;
&lt;li&gt;写入类型：直写式高速缓存(写直达）或者 写回式高速缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于&lt;strong&gt;通知机制&lt;/strong&gt; ： 由于写更新协议必须将所有的写操作广播给共享的高速缓存，需要更大的带宽。而且对于进程迁移后，没有必要更新的缓存在没有置换前也会一直更新。所以近期的多处理器都会选择执行写失效协议。&lt;/p&gt;
&lt;p&gt;对于&lt;strong&gt;写入类型&lt;/strong&gt; ： 写直达查找高速缓存最新值非常容易，但是对互连设备的带宽要求比较高，所以大多数处理器方案并不会采用。但是对于写回式，会引入更多的复杂性。多个处理器写入单元u，最终到达主存的值由包含u的高速缓存替换顺序决定，而与各处理器对u进行写操作顺序无关。所以采用写回式需要设计相应的协议来保证。&lt;/p&gt;
&lt;p&gt;我们下面重点集中关注基于写失效和写回式的缓存一致性问题。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Coherency vs. Consistency&lt;/h2&gt;
&lt;p&gt;Cache coherency and consistency define the action of the processors to maintain coherence.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Coherency&lt;/code&gt; defines what value is returned on a read&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Consistency&lt;/code&gt; defines when it is available&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里需要澄清两个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Coherency (缓存一致性)&lt;/li&gt;
&lt;li&gt;缓存一致性需要保证读时需要保证什么值，总是返回最新写入的值。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写操作是串行，按顺序写入a、b，读出的顺序不能为b、a。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consistency (存储一致性)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;存储一致性需要保证一个值什么时候才能读取。&lt;/li&gt;
&lt;li&gt;需要建立存储一致性(同一性, Consistency)模型，模型从严格到宽松。越宽松也就越要程序员来显式地使用同步原语、原子操作来保证一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Cache Coherence protocols&lt;/h2&gt;
&lt;h3&gt;Snooping&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The caches are all accessible via some &lt;strong&gt;broadcast&lt;/strong&gt; medium (a bus or switch)&lt;/li&gt;
&lt;li&gt;All cache controllers &lt;strong&gt;monitor or snoop&lt;/strong&gt; on the medium to determine whether or not they have a copy of a block that is requested&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Directory Based&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The sharing status of a block of physical memory is kept in just one location, called the &lt;strong&gt;directory&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;using &lt;strong&gt;point-to-point messages&lt;/strong&gt; sent between the processors and memories to keep caches consistent&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;保证高速缓存一致性的协议通常有两个: 监听式和基于目录&lt;/p&gt;
&lt;p&gt;监听式的协议 ，通过在总线上广播来在获得高速缓存。处理器的缓存控制器通过在总线上监听来发现是否在缓存中有副本。总线的根本性质是: 总线是连接几台设备的单独一组导线，其中每一设备可以观察到每一个总线事务，这就是一种广播形式。正如前面所说，这种集中式总线架构的规模在20-30个处理器，多于的话就会出现瓶颈。&lt;/p&gt;
&lt;p&gt;对于基于目录的协议，该协议保存了每个缓存行的状态，称之为目录。目录中的信息包括哪个缓存行拥有该块的副本、是否处于脏状态等。通过对目录的查询，可以通过点到点的通讯来维护缓存一致性，从而避免广播。为了防止目录成为瓶颈，可以使目录本身也随着缓存存储器来分布，从而更易扩展。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Snooping&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Single physical address space with uniform memory access (UMA) times.&lt;/li&gt;
&lt;li&gt;The bus severs an arbitrator for serializing accesses to a shared line.&lt;/li&gt;
&lt;li&gt;All caches see the same sequence of writes.&lt;/li&gt;
&lt;li&gt;The cache coherence traffic creates another limit on the scale and the speed of the processors. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="figure-3" src="http://blog.atomd.me/images/scalable-cache-coherence/snoopy-cache-coherent-multiprocessor.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;处理读缺失 ： 实现写失效协议的关键是使用总线或其他广播媒介来完成无效操作。处理器首先取得总线控制权然后广播无效数据的地址。所有处理器监听后检查是否存在副本，如果有则设置无效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理共享未写回的缓存行的写操作 : 向一个共享块执行写操作时，写操作需要获得对总线的访问权才能广播无效性操作。如果两个处理器同时对一个共享块进行写操作，其广播无效操作的请求会通过总线仲裁实现串行化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;MESI (Illinois) Protocol&lt;/h2&gt;
&lt;p&gt;&lt;img alt="figure-4" src="http://blog.atomd.me/images/scalable-cache-coherence/state-transition-diagram-for-the-Illinois-MESI-protocol.png" /&gt;&lt;/p&gt;
&lt;h3&gt;States&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Modified&lt;/li&gt;
&lt;li&gt;Exclusive&lt;/li&gt;
&lt;li&gt;Shared&lt;/li&gt;
&lt;li&gt;Invalid&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Requests by processors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PrRd&lt;/li&gt;
&lt;li&gt;PrWr&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Actions by bus&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BusRd&lt;/li&gt;
&lt;li&gt;BusRdX&lt;/li&gt;
&lt;li&gt;BusWB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;监听式协议是一种分布式算法，由一组相互作用的有限状态自动机来表示。高速缓存控制器中有两套输入：
1. 由处理器发出的存储器请求。
2. 总线监听器为了通知其它高速缓存而发起的总线事务。&lt;/p&gt;
&lt;p&gt;MESI协议可以分为四个状态：M (已修改的)、S (共享的)、E (独占的)、I (失效的)&lt;/p&gt;
&lt;p&gt;处理器发起的请求：读请求(PrRd)、写请求(PrWr)
总线引起的动作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总线读(BusRd)：这过程由高速缓存扑空的PrRd产生。高速缓存控制器将地址放在总线上， 请求一个只读的拷贝。&lt;/li&gt;
&lt;li&gt;总线排它说(BusRdx)：这个过程由写请求产生，PrWr要读的存储块要么不在高速缓存中，或者在但是不处于M 状态。请求一个它要修改的排它拷贝，主存储器(或者其它高速缓存)提供后，其它的缓存将失效，一旦高速缓存得到了排它拷贝，写操作就可以在高速缓存中完成。&lt;/li&gt;
&lt;li&gt;总线写(BusWB)：由高速缓存控制器在回写时产生。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里有三点需要澄清：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么需要总线排它读，而不是直接写呢？因为协议中是以缓存行为单位的，写入时需要获得缓存行的其他数据再进行写入，来保证同一时刻只有一个缓存行存在脏数据。&lt;/li&gt;
&lt;li&gt;MESI协议和MSI协议相比，引入了 E 状态，所以需要共享信号 S，来判断数据在高速缓存中是否是独占的。&lt;/li&gt;
&lt;li&gt;在BusRd中，由主存储器来提供读丢失的数据。而在Illinois原始版本中提供数据的是缓存，这需要一种缓存到缓存的技术。比如当缓存是SRAM，主存是DRAM，前者比较快。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Directory Based&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Coherence state maintained in a directory associated with memory&lt;/li&gt;
&lt;li&gt;Requests to a memory block do not need broadcasts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="figure-5" src="http://blog.atomd.me/images/scalable-cache-coherence/a-scalable-multiprocessor-with-directories.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们的讨论主要是基于分布式存储器多处理系统。正如监听协议一样，目录协议也必须实现两个操作 : 处理读缺失和处理共享未写回的缓存行的写操作。为了实现这些操作，目录必须跟踪每个缓存行的状态。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Example: DASH&lt;/h2&gt;
&lt;p&gt;&lt;img alt="figure-6" src="http://blog.atomd.me/images/scalable-cache-coherence/block-diagram-of-a-2x2-bash-prototype.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面我们以斯坦福经典的DASH协议为例子来说明基于目录式缓存一致性协议。&lt;/p&gt;
&lt;p&gt;这种结构是由一定数目的处理结点构成的，结点之间通过一个高带宽、低延迟的互连网络连接。DASH系统的可扩展性要求尽量避免广播，而且不依赖于任何具体的网络拓扑结构。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;The Stanford DASH Prototype&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Directory Architecture for Shared memory&lt;/li&gt;
&lt;li&gt;rchitecture consists of many clusters&lt;ul&gt;
&lt;li&gt;Each cluster contains 4 processors&lt;/li&gt;
&lt;li&gt;Processor caches&lt;ul&gt;
&lt;li&gt;L1I : 64 KB, direct mapped&lt;/li&gt;
&lt;li&gt;L1D : 64 KB, direct-mapped, write-through&lt;/li&gt;
&lt;li&gt;L2  : 256 KB, direct-mapped, write-back&lt;/li&gt;
&lt;li&gt;4-word write buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Snooping implemented within a cluster (MESI)&lt;/li&gt;
&lt;li&gt;Directory-based implemented  between the clusters (full bit vector)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mesh interconnected network&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="figure-7" src="http://blog.atomd.me/images/scalable-cache-coherence/dash-architecture.png" /&gt;&lt;/p&gt;
&lt;p&gt;DASH每个节点(cluster) 是由4个高性能处理器组成，物理存储器分布在各结点中，每个结
点都可访问整个存储器。处理器组内的高速缓存间是利用基于总线的监听方案来维持一致
性，而组间则利用分布式基于目录的一致性协议维持高速缓存一致性。&lt;/p&gt;
&lt;p&gt;每个处理器有两级缓存，其中2级缓存的作用是改变1级缓存写直达的缓存策略为写回式策略，并为总线监听提供额外的缓存标记。2级缓存监听总线并维护了节点内的高速缓存一致性，采用Illinois协议。&lt;/p&gt;
&lt;p&gt;总线提供了总线到缓存，缓存到缓存的传输能力。因为不支持对跨节点访问的分离事务，将MPBUS协议扩展，支持重发机制。为了避免不必要的重发，发送请求的处理器从仲裁器屏蔽掉，直到对方答复的消息到达，缓存后再将处理器解开屏蔽，重发请求后获得所请求的远程数据。&lt;/p&gt;
&lt;p&gt;目录控制器主要维护了节点间的缓存一致性，并提供了到互联网络的接口。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;DASH Directory board&lt;/h2&gt;
&lt;p&gt;&lt;img alt="figure-7" src="http://blog.atomd.me/images/scalable-cache-coherence/directory-board-block-diagram.png" /&gt;&lt;/p&gt;
&lt;p&gt;目录控制板器是单块印刷电路，上面有五个主要部件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DC：目录控制器，含有对应于该处理器组内的内存的目录存储器，还负责转发对远程组的请求和回应。&lt;/li&gt;
&lt;li&gt;PCPU：伪CPU，代表远程组CPU。负责转发和缓存远程组CPU的请求并沿着组内总线将请求发送出去。&lt;/li&gt;
&lt;li&gt;RC：响应控制器，负责追踪本地组一些未完成的请求并接受从远程组返回的相应的相应回应。&lt;/li&gt;
&lt;li&gt;Mesh * 2：互联网络是由一组mesh网络构成，分别用来处理请求和回应的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目录存储器有一组目录项组成，每个存储块对应一项。目录项是由一位状态组 (1 bit) 和一个指针位向量 (16 bits) 组成。其中使用位向量来维护哪个节点拥有内存块的副本，状态位来记录是否有一个共享或者独占的节点。DC会随着访问内存的事务一起访问目录存储项并决定其在网络上发送的消息或产生的动作。&lt;/p&gt;
&lt;p&gt;RC中还维护了RAC (remote access cache)，RAC是保存当前未完成的状态，并以处理器第5块高速缓存缓存了远程组返回的数据，并且等待远程回应的处理器解开总线屏蔽，RAC在通过高速缓存间传输提供数据。RAC和本地组的四个处理器的缓存一起组成了五路组关联的缓存。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;DASH Coherence Protocol&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Terminology&lt;ul&gt;
&lt;li&gt;Local cluster&lt;/li&gt;
&lt;li&gt;Home cluster&lt;/li&gt;
&lt;li&gt;Remote cluster&lt;/li&gt;
&lt;li&gt;Local memory&lt;/li&gt;
&lt;li&gt;Remote memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Invalidation-based protocol&lt;/li&gt;
&lt;li&gt;Cache states: invalid, shared, and dirty&lt;/li&gt;
&lt;li&gt;Directory state (for all local memory blocks)&lt;ul&gt;
&lt;li&gt;Uncached-remote: not cached by any remote cluster&lt;/li&gt;
&lt;li&gt;Shared-remote: Cached, unmodified, by one or more remote clusters&lt;/li&gt;
&lt;li&gt;Dirty-remote: Cached, modified, by one remote cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Owning cluster for a block is the home cluster except if dirty-remote&lt;/li&gt;
&lt;li&gt;Owning cluster responds to requests and updates directory state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对处理器组和存储器，有以下的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地组(Local cluster)：发起一个给定请求的某处理器组&lt;/li&gt;
&lt;li&gt;总部组(Home cluster)：给定物理地址的主存和目录所在的处理器组&lt;/li&gt;
&lt;li&gt;远程组(Remote cluster)：除了以上两种之外的其它处理器组&lt;/li&gt;
&lt;li&gt;拥有组(Owing cluster)：缓存包含数据副本的处理器组&lt;/li&gt;
&lt;li&gt;当地存储器(Local memory)：是与当地组相关联的那部分主存&lt;/li&gt;
&lt;li&gt;远程存储器(Remote memory)：是那些总部不在本地的其它存储器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个存储器块的状态有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uncached-remote：即所有的远程组的高速缓存都不含此块的副本&lt;/li&gt;
&lt;li&gt;Shared-remote：有一个或多个远程组含有此块副本且副本块与存储器块是一致的&lt;/li&gt;
&lt;li&gt;Dirty-remote：仅有一个远程组含有此块，此块已经修改，与存储器相应的块不一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Read Requests&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Initiated by CPU load instruction&lt;/li&gt;
&lt;li&gt;If address is in L1 cache, L1 supplies data – otherwise, fill request sent to L2&lt;/li&gt;
&lt;li&gt;If address is in L2, L2 supplies data – otherwise, read request sent on bus&lt;/li&gt;
&lt;li&gt;If address is in the cache of another processor in the cluster or in the RAC, that cache responds&lt;ul&gt;
&lt;li&gt;Shared: data transferred over the bus to requester&lt;/li&gt;
&lt;li&gt;Dirty: data transferred over bus to requester, RAC takes ownership of cache line&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If address not in local cluster, processor retries bus operation, and request is sent to home cluster, RAC entry is allocated&lt;/li&gt;
&lt;li&gt;If the block is in an uncached-remote or shared-remote state the directory controller sends the data over the reply network to the requesting cluster. &lt;/li&gt;
&lt;li&gt;Requests to remote memory with directory in dirty-remote state explained in the figure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="figure-7" src="http://blog.atomd.me/images/scalable-cache-coherence/flow-of-Read-Request-to-remote-memory-with-directory-in-dirty-remote-state.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Read-Exclusive Requests&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Initiated by CPU store instruction&lt;/li&gt;
&lt;li&gt;Data written through L1 and buffered in a write buffer&lt;/li&gt;
&lt;li&gt;If L2 has ownership permission, write is retired. otherwise, read-exclusive request sent on local bus&lt;ul&gt;
&lt;li&gt;Write buffer is stalled&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If address is in "dirty" in one of the caches in the cluster or in the RAC&lt;ul&gt;
&lt;li&gt;Owning cache sends data and ownership to requester&lt;/li&gt;
&lt;li&gt;Owning cache invalidates its copy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If address not in local cluster&lt;ul&gt;
&lt;li&gt;Processor retries bus operation&lt;/li&gt;
&lt;li&gt;Request is sent to home cluster&lt;/li&gt;
&lt;li&gt;RAC entry is allocated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the memory block is in an uncached-remote the data and ownership are immediately sent back over the reply network.&lt;/li&gt;
&lt;li&gt;Requests to remote nodes in shared-remote state explained in the figure&lt;/li&gt;
&lt;li&gt;Requests to remote nodes in dirty-remote state explained in the figure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="figure-7" src="http://blog.atomd.me/images/scalable-cache-coherence/flow-of-read-exclusive-request-to-remote-memory-with-directory-in-shared-remote-state.png" /&gt;
&lt;img alt="figure-7" src="http://blog.atomd.me/images/scalable-cache-coherence/flow-of-read-exclusive-request-to-remote-memory-with-directory-in-dirty-remote-state.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Other Implementation Details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Writeback requests: When a dirty block is replaced&lt;ul&gt;
&lt;li&gt;Home is local cluster: Write data to main memory&lt;/li&gt;
&lt;li&gt;Home is a remote cluster: Send data to home which updates memory and state as "uncached-remote"&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception conditions&lt;ul&gt;
&lt;li&gt;Request to a dirty block of a remote cluster after it gave up ownership&lt;/li&gt;
&lt;li&gt;Ownership bouncing back and forth between two remote clusters while a third cluster requests block&lt;/li&gt;
&lt;li&gt;Multiple paths in the system lead to requests being received out of order&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DeadLock and Error Handling&lt;/li&gt;
&lt;li&gt;Amount of information stored in directory affects scalability&lt;ul&gt;
&lt;li&gt;For each memory block, DASH stores state and bit vector for other processors&lt;/li&gt;
&lt;li&gt;For a more scalable system, overhead needs to be lower&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Directory Schemes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Full Bit Vector Scheme (need $ P^2 * M / B $ bits)&lt;/li&gt;
&lt;li&gt;Cache-Based Linked List Schemes&lt;/li&gt;
&lt;li&gt;Limited Pointer Schemes&lt;ul&gt;
&lt;li&gt;log2P bits per pointer, need $ (i \times log_2^P) \times (P \times M/B) $ bits&lt;/li&gt;
&lt;li&gt;How to deal with the pointer overflow?&lt;ul&gt;
&lt;li&gt;Limited Pointers with Broadcast Scheme ($ Dir_i B $)&lt;/li&gt;
&lt;li&gt;Limited Pointers without Broadcast Scheme ($ Dir_i NB $)&lt;/li&gt;
&lt;li&gt;Limited Pointers superset Scheme ($ Dir_i X $)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目录的组织通常分为两种方案：基于指针的方案和基于链表的方案。&lt;/p&gt;
&lt;p&gt;DASH的原型系统使用的基于指针的 Full Bit Vector 的方案来记录目录信息，但是其内存随着处理器数量的平方而线性增加。&lt;/p&gt;
&lt;p&gt;除此之外，也可以通过双向链表把目录信息维护在缓存中，这样虽然减低了内容的开销。但是复杂性极大地增加，尤指的是维护链表的时间复杂度和实现的难度。&lt;/p&gt;
&lt;p&gt;所以就采用优化过的有限指针的方案，指的是不保存所有处理器的信息，而保存有限个。
但是这时就需要解决指针数量溢出的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ Dir_i B $ 设置广播位，当发生溢出时向所有缓存广播失效。&lt;/li&gt;
&lt;li&gt;$ Dir_i NB $ 当发生溢出时，通过置换的方式失效其中一个缓存。&lt;/li&gt;
&lt;li&gt;$ Dir_i X $ 保存两个指针，当指针溢出，同样的内存转化为一个组合指针。2bits 表示指针的一个bit位的3个状态：1、0、both。这种方式将组合指针映射到一个指针集合，这样就解决了指针溢出的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Optimization Methods&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;New Proposals&lt;/strong&gt; to reduce memory requirements of directory schemes without significantly compromising performance and communication requirements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Coarse Vector Scheme ($Dir_i CVr$)&lt;ul&gt;
&lt;li&gt;i is the number of pointers and r is the size of the region that each bit in the coarse vector represents &lt;/li&gt;
&lt;li&gt;The pointer storage memory reverts to a bit vector when pointer overflow&lt;/li&gt;
&lt;li&gt;Each bit of this bit vector stands for a group of r processors &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sparse Directories&lt;ul&gt;
&lt;li&gt;The total amount of cache memory in a multiprocessor is much less than the total amount of main memory &lt;/li&gt;
&lt;li&gt;Replacing an entry of the sparse directory after invalidating all processor caches which that entry points to&lt;/li&gt;
&lt;li&gt;Replacement policies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对基于目录的方案，其内存占用有两个维度，一个是单条目录信息的内存占用，另一个是
目录的条目数量。针对这两个维度，提出另外两种方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;粗粒度向量(Coarse Vector Scheme)：一个bit代表一个处理器集合，当失效时只失效这个集合对应的处理器。&lt;/li&gt;
&lt;li&gt;稀疏目录(Sparse Directories)：因为缓存相对于内存非常小，不需要保存所有目录项的信息。根据缓存的思想，只保存最热的目录项，在失效完相应的缓存后将目录项置换出去。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种方案在内存开销和通信成本方面比先前的方案有着显著减低。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;False Sharing vs. Spatial Locality&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;False sharing&lt;/strong&gt; occurs when threads on different processors modify different variables that reside on the same cache line. This invalidates the cache line and forces an update, which hurts performance.&lt;/p&gt;
&lt;p&gt;&lt;img alt="figure-7" src="http://blog.atomd.me/images/scalable-cache-coherence/false-sharing.png" /&gt;&lt;/p&gt;
&lt;p&gt;多处理器共享一个缓存行，当同时修改不同的变量，就会产生不必要的失效，这极大影响了性能。缓存行的话可以减少读扑空，但是同时会引入更多伪共享，这就是空间局部性和伪共享的矛盾。&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;To improve the performance of caches, trying to enhance the spatial locality of multiprocessor data is an approach at least as, or even more promising, than to remove false sharing.&lt;/li&gt;
&lt;li&gt;Data layout optimizations that are programmer-transparent and not restricted to regular codes can be used to reduce the miss rate. &lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Reduce false sharing&lt;/th&gt;
&lt;th align="left"&gt;Improve the spatial locality of data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Split Scalars&lt;/td&gt;
&lt;td align="left"&gt;Lock Scalars&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Heap allocation&lt;/td&gt;
&lt;td align="left"&gt;Record alignment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;Record expansion&lt;/strong&gt; (padding) &lt;strong&gt;(+)&lt;/strong&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Record alignment&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;note&lt;/code&gt;: (+) Leaving it up to the programmer to pad the data structure if so desired.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了提高缓存的性能，增强空间局部性比消除伪共享更有效。因为对于扑空率的影响，空间局部性比伪共享的作用更加显著。&lt;/li&gt;
&lt;li&gt;对程序员透明的数据布局优化和不限制在常规代码中使用相关技术将有助于减少缓存的扑空。&lt;/li&gt;
&lt;li&gt;对于程序员来讲，alignment 和 padding 是非常有效的技术来避免伪共享。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Related Reference&lt;/h2&gt;
&lt;p&gt;This presentation is based on lots of papers, books and information on internet. Here are the main reference:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;"Parallel Computer Architecture A Hardware/Software Approach" by Culler and Singh, published by Morgan Kaufmann, 1997.&lt;/li&gt;
&lt;li&gt;D. Lenoski et al. "The Directory-Based Cache Coherence Protocol for the DASH Multiprocessor" International Symposium on Computer Architecture 1990.&lt;/li&gt;
&lt;li&gt;A. Gupta et al. "Reducing Memory and Traffic Requirements for Scalable Directory-Based Cache Coherence Schemes", International Conference on Parallel Processing 1990.&lt;/li&gt;
&lt;li&gt;J. Torrellas, M. Lam &amp;amp; J. Hennessy "False Sharing and Spatial Locality in Multiprocessor Caches" Transactions on Computers, June 1994.&lt;/li&gt;
&lt;li&gt;"Computer Architecture: A Quantitative Approach, 4th Edition" by John L. Hennessy and David A. Patterson, 2006.&lt;/li&gt;
&lt;li&gt;The presentation named "Directory-Based Cache Coherence Protocols" of Portland State University ECE 588/688. [&lt;a href="http://web.cecs.pdx.edu/~alaa/ece588/notes/directory-protocols.pdf"&gt;link&lt;/a&gt;]&lt;/li&gt;
&lt;/ol&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary><category term="parallel"></category><category term="cache"></category></entry><entry><title>hello, world</title><link href="http://blog.atomd.me/posts/essay/hello-world/" rel="alternate"></link><updated>2012-10-24T19:03:00+08:00</updated><author><name>atomd</name></author><id>tag:blog.atomd.me,2012-10-24:posts/essay/hello-world/</id><summary type="html">&lt;p&gt;又开了博客。&lt;/p&gt;
&lt;p&gt;消费多年，自己有能力开始产出。这是个技术为主的博客，来记录学习的过程。当然也会记录我的生活和想法。&lt;/p&gt;
&lt;p&gt;博客托管在Github上，主要的原因在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文章需要版本管理，而且需要备份管理。Github的pages天然有这个优势。&lt;/li&gt;
&lt;li&gt;支持Markdown等的标记语言，无关格式和样式，可以方便转到其他格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望自己玩得开心！&lt;/p&gt;</summary><category term="life"></category></entry></feed>